{"version":3,"file":"static/js/8698.b8bd7dc8.chunk.js","mappings":"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","sources":["components/Mybrands/index.tsx"],"sourcesContent":["import {\n  Flex,\n  Text,\n  Image,\n  Spacer,\n  Divider,\n  Stack,\n  useToast,\n  Center,\n  Box,\n  Skeleton,\n} from \"@chakra-ui/react\";\nimport { FC } from \"react\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MeProtocolButton from \"../MeProtocolButton\";\nimport { useNavigate } from \"react-router-dom\";\nimport Images_Icons from \"../../constants/icons-images\";\nimport { Dispatch } from \"redux\";\nimport { RootState } from \"../../redux/store\";\nimport { brands } from \"../../constants/brandsdummyJSON\";\nimport { nanoid } from \"nanoid\";\nimport { useUnfollowBrandMutation } from \"../../redux/rtkQuery/api\";\nimport { AuthReducerProps } from \"../../interfaces\";\nimport MeProtocolToast from \"../../hooks/MeProtocolToast\";\nimport { getBrandsUserFollowing } from \"../../redux/UserSlice\";\nimport { GLOBAL_PREFIX } from \"../../constants\";\n\nconst MyBrands: FC<any> = ({ item }): JSX.Element => {\n  const { token }: AuthReducerProps = useSelector((state: RootState) => state.authReducer);\n  const { root, bodyText, headText } = useStyles();\n  const dispatch = useDispatch<Dispatch>();\n\n  const [followLoading, setFollowLoading] = useState<boolean>(false);\n  let navigate = useNavigate();\n  const toast = useToast();\n  const [unfollowBrand] = useUnfollowBrandMutation();\n\n  // -------------------------------------------------UNFOLLOW BRAND FN-----------------------------------------------\n  async function UnFollowBrand() {\n    if (!token) {\n      navigate(`${GLOBAL_PREFIX}/login`);\n    }\n    setFollowLoading(true);\n    await unfollowBrand({ brandId: item?.brand?.id })\n      .then((res: any) => {\n        if (res?.data?.statusCode === 200) {\n          MeProtocolToast(toast, \"Brand Unfollowed\", 5000);\n          dispatch(getBrandsUserFollowing({ token }));\n        }\n      })\n      .catch((e: any | unknown) => {\n        console.log(e, \"unFollowBrandERR\");\n      })\n      .finally(() => {\n        setFollowLoading(false);\n      });\n  }\n\n  return (\n    <Stack>\n      <Flex {...root} flexDir=\"row\" align={\"center\"}>\n        {/* ------------------------IMAGE---------------------------------- */}\n\n        <Flex w=\"40%\" h={\"70%\"} flexDir=\"row\" align={\"center\"} justify=\"space-between\">\n          <Flex w=\"250px\" h=\"150px\" flexDir=\"column\" bg={\"grey\"}>\n            {/* {[1, 2, 3, 4]?.map((e: any) => ( */}\n            <Box key={nanoid()} role=\"group\">\n              <Skeleton isLoaded={true} mr={\"20px\"} overflow={\"hidden\"} w={\"360px\"} h={\"180px\"}>\n                <Center\n                  w=\"250px\"\n                  h=\"150px\"\n                  bg={\"#0000003D\"}\n                  pos=\"absolute\"\n                  // as={Image}\n                  background={`url(${item?.brand?.banners[0]}) center/cover no-repeat`}\n                  overflow={\"hidden\"}\n                  color={\"rgba(153,153,153,0.66)\"}\n                  _hover={{ color: \"black\" }}\n                  // fallbackSrc={Images_Icons.appLogoPlaceholder}\n                  // fallbackStrategy={\"beforeLoadOrError\"}\n                >\n                  {item?.brand?.white_logo && (\n                    <Image\n                      w={\"60px\"}\n                      h={\"60px\"}\n                      position=\"relative\"\n                      borderRadius={\"5px\"}\n                      src={item?.brand?.white_logo}\n                      objectFit={\"contain\"}\n                      fallbackSrc={Images_Icons.appLogoPlaceholder}\n                      fallbackStrategy={\"onError\"}\n                    />\n                  )}\n                </Center>\n              </Skeleton>\n            </Box>\n            {/* ))} */}\n          </Flex>\n          <Spacer />\n          <Flex flexDir=\"column\" w=\"250px\" h=\"150px\" ml={\"20px\"}>\n            {/* -------------------- Brand Name --------------------------------- */}\n            <Text {...headText} noOfLines={1} textTransform=\"uppercase\">\n              {item?.brand?.brandName}\n            </Text>\n            {/* <Spacer /> */}\n            {/* --------------------- Brand Description -------------------------- */}\n            <Text {...bodyText} noOfLines={4}>\n              {item?.brand?.description}\n            </Text>\n          </Flex>\n        </Flex>\n\n        {/* ------------------------UNFOLLOW---------------------------------- */}\n        <Flex w=\"30%\" h={\"100%\"} align=\"flex-end\" flexDir={\"column\"}>\n          <MeProtocolButton\n            name={\"Unfollow\"}\n            isLoading={followLoading}\n            rest={{\n              w: \"146px\",\n              fontSize: \"16px\",\n              bg: \"dark\",\n              borderWidth: 1,\n              borderColor: \"light\",\n              color: \"light\",\n              className: \"unfollow\",\n              borderRadius: 0,\n            }}\n            onClick={UnFollowBrand}\n          />\n          <Text as=\"button\" {...bodyText}>\n            Contact Brand\n          </Text>\n          <Text as=\"button\" {...bodyText}>\n            Report Brand\n          </Text>\n        </Flex>\n      </Flex>\n      <Divider />\n    </Stack>\n  );\n};\n\nexport default MyBrands;\n\nconst useStyles = () => {\n  return {\n    root: {\n      w: \"100%\",\n      h: \"150px\",\n      justify: \"space-between\",\n    },\n    headText: {\n      fontSize: \"18px\",\n    },\n    bodyText: {\n      fontSize: \"16px\",\n      color: \"#999999\",\n      mt: \"2px\",\n    },\n  };\n};\n"],"names":["_ref","_item$brand","_item$brand2","_item$brand3","_item$brand4","_item$brand5","item","token","useSelector","state","authReducer","_useStyles","useStyles","root","bodyText","headText","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","followLoading","setFollowLoading","navigate","useNavigate","toast","useToast","_useUnfollowBrandMuta","useUnfollowBrandMutation","unfollowBrand","_UnFollowBrand","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_item$brand6","wrap","_context","prev","next","concat","GLOBAL_PREFIX","brandId","brand","id","then","res","_res$data","data","statusCode","MeProtocolToast","getBrandsUserFollowing","catch","e","console","log","finally","stop","apply","arguments","_jsxs","Stack","children","Flex","_objectSpread","flexDir","align","w","h","justify","_jsx","bg","Box","role","Skeleton","isLoaded","mr","overflow","Center","pos","background","banners","color","_hover","white_logo","Image","position","borderRadius","src","objectFit","fallbackSrc","Images_Icons","appLogoPlaceholder","fallbackStrategy","nanoid","Spacer","ml","Text","noOfLines","textTransform","brandName","description","MeProtocolButton","name","isLoading","rest","fontSize","borderWidth","borderColor","className","onClick","as","Divider","mt"],"sourceRoot":""}