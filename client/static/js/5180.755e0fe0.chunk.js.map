{"version":3,"file":"static/js/5180.755e0fe0.chunk.js","mappings":"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","sources":["bulkComponents/OffersCategory/index.tsx","components/DashboardNewTopCard/index.tsx","components/SkeletonLoader/index.tsx","pages/DashboardModule/DashboardCategory/DashboardCategory.tsx"],"sourcesContent":["import {\n  Flex,\n  Spacer,\n  Spinner,\n  SimpleGrid,\n  Center,\n  Button,\n  Icon,\n  Stack,\n  Text,\n  useToast,\n  Skeleton,\n  Heading,\n  HStack,\n} from \"@chakra-ui/react\";\nimport { nanoid } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { FC, lazy, Suspense, useEffect, useState } from \"react\";\nimport { FaAngleDown } from \"react-icons/fa\";\nimport { useNavigate } from \"react-router-dom\";\nimport { PopularDeaslsSvg } from \"../../assets/iconsSvg/iconsSvg\";\nimport Container from \"../../components/Container\";\nimport DashboardProductItemOld from \"../../components/DashboardProductItemOld\";\n// import DashboardProductItem from \"../../components/DashboardProductItem\";\n// import MeProtocolButton from \"../../components/MeProtocolButton\";\nimport { BASE_URL } from \"../../config\";\nimport { GLOBAL_PREFIX } from \"../../constants\";\nimport { useDashboardStyles } from \"../../pages/DashboardModule/Dashboard/styles\";\nimport { OfferDataProps } from \"../../interfaces/responseTypes\";\n// import * as api from \"../../redux/rtkQuery/api\";\n\nconst MeProtocolButton = lazy(() => import(\"../../components/MeProtocolButton\"));\nconst DashboardProductItem = lazy(() => import(\"../../components/DashboardProductItem\"));\n\ninterface OffersCategoryProps {\n  categoryName: string;\n  category_id: string;\n  HeaderShown?: boolean;\n  rest?: any;\n  loaded?: any;\n}\n\nconst OffersCategory: FC<OffersCategoryProps> = ({\n  categoryName,\n  category_id,\n  HeaderShown = true,\n  rest,\n  loaded,\n}): JSX.Element | null => {\n  let navigate = useNavigate();\n  let toast = useToast();\n\n  const { nameStyles, button, loadMore } = useDashboardStyles();\n  // const [isLoaded, setIsLoaded] = useState<boolean>(true);\n  const [page, setPage] = useState<number>(1);\n  const [loadedOffers, setLoadedOffers] = useState<Array<OfferDataProps>>([]);\n  const [loadingMore, setLoadingMore] = useState<boolean>(false);\n\n  const [reachedEnd, setReachedEnd] = useState<boolean>(false);\n  const [totalPages, setTotalPages] = useState<number>(1);\n  const [offersFetching, setOffersFetching] = useState<boolean>(false);\n\n  // const { data }: any = useGetAllOffersQuery(\n  //   { page, limit: 8, category_id },\n  //   { refetchOnMountOrArgChange: true }\n  // );\n\n  useEffect(() => {\n    // console.log(category_id);\n\n    GET_CATEGORIES_OFFERS();\n  }, [page]);\n\n  // useEffect(() => {\n  //   LoadMore();\n  // }, [page, data]);\n\n  // function LoadMore() {\n  //   setLoadingMore(true);\n\n  //   try {\n  //     setLoadedOffers([...loadedOffers, ...data.data.offers]);\n  //   } catch (e) {\n  //     console.log(e, \"LoadMoreErr\");\n  //   } finally {\n  //     setLoadingMore(false);\n  //   }\n  // }\n\n  // --------------------------------------------------------------NEW FETCH IMPLEMENTATION---------------------------------------------------------------------------\n\n  async function GET_CATEGORIES_OFFERS() {\n    setOffersFetching(true);\n    setReachedEnd(false);\n    try {\n      const {\n        data,\n      }: {\n        data: {\n          data: { offers: OfferDataProps[] };\n        };\n      } = await axios.get(`${BASE_URL}/store/offer?page=${page}&limit=8&category=${category_id}`);\n\n      if (data?.data?.offers.length < 1) {\n        setReachedEnd(true);\n        // MeProtocolToast(toast, \"No offer available\", 3000, \"top-right\");\n      }\n      setLoadedOffers([...loadedOffers, ...data?.data?.offers]);\n      // setTotalPages(data?.data?.total);\n      // console.log(data?.data?.offers);\n    } catch (e: any | any | unknown) {\n      console.log(e, \"GET_CATEGORIES_OFFERS_ERR\");\n    } finally {\n      setOffersFetching(false);\n    }\n  }\n\n  if (loadedOffers?.length <= 0) {\n    return null;\n  }\n\n  return (\n    <Skeleton borderRadius={\"20px\"} isLoaded={loaded}>\n      <Stack>\n        {HeaderShown && (\n          <Flex w={\"100%\"} pt={\"20px\"}>\n            <HStack>\n              <PopularDeaslsSvg />\n              <Heading {...nameStyles}>{categoryName}</Heading>\n            </HStack>\n            <Spacer />\n            <Suspense fallback={<Spinner size=\"sm\" />}>\n              <Center\n                bg=\"dark\"\n                color=\"white\"\n                px=\"15px\"\n                py=\"5px\"\n                as=\"button\"\n                onClick={() =>\n                  navigate(`${GLOBAL_PREFIX}/dashboard/category/${categoryName}`, {\n                    state: rest,\n                  })\n                }\n                {...nameStyles}\n              >\n                SEE ALL OFFERS\n              </Center>\n            </Suspense>\n          </Flex>\n        )}\n        <SimpleGrid\n          columns={[2, 2, 3, 4, 4]}\n          spacingX={[\"35px\", \"35px\", \"35px\", \"15px\", \"35px\"]}\n          w={\"100%\"}\n        >\n          <Suspense fallback={<Spinner size=\"sm\" />}>\n            {loadedOffers?.map((e, i: number) => (\n              <DashboardProductItem\n                key={nanoid()}\n                isLoaded={!offersFetching}\n                productTitle={e.name}\n                points={`${e?.tokens}${e.reward?.rewardSymbol}`}\n                productSubtitle={e.product?.category?.name}\n                price={e.originalPrice}\n                isNew={moment(moment()).diff(e?.createdAt, \"days\") < 1}\n                // trending={e.trending}\n                rest={{ ...e }}\n                i={i}\n                bgImage={e?.offerImages}\n                onClick={() =>\n                  // navigate(`${GLOBAL_PREFIX}/productDetails/${e.slug}`, { state: { ...e } })\n                  navigate(`${GLOBAL_PREFIX}/productDetails/${e.offerCode}`)\n                }\n              />\n            ))}\n          </Suspense>\n        </SimpleGrid>\n        {/* LOAD MORE BUTTON */}\n        {/* {totalPages !== page || */}\n        {!reachedEnd && (\n          <Center\n            as={Button}\n            {...loadMore}\n            onClick={() => {\n              setPage(page + 1);\n            }}\n          >\n            {offersFetching ? (\n              <Spinner size={\"sm\"} />\n            ) : (\n              <>\n                Load more <Icon as={FaAngleDown} ml={\"5%\"} />\n              </>\n            )}\n          </Center>\n        )}\n      </Stack>\n    </Skeleton>\n  );\n};\n\nexport default OffersCategory;\n","import { Flex, Spacer, Text, Image } from \"@chakra-ui/react\";\nimport { FC } from \"react\";\nimport { DashboardTopCardProps } from \"../../interfaces\";\nimport MeProtocolButton from \"../MeProtocolButton\";\n\nconst DashboardNewTopCard: FC<DashboardTopCardProps> = ({\n  title,\n  desc,\n  buttonLabel,\n  design,\n  icon,\n  onClick,\n}): JSX.Element => {\n  const { root } = useStyles();\n  return (\n    // <Container>\n    <Flex {...root} pos=\"relative\" className=\"banner-cards\">\n      {/* ----------------------------------------------------------------LEFT COLUMN ----------------------------------------------------------------*/}\n      <Flex flexDir={\"column\"}>\n        <Text color={\"light\"} w=\"75%\" fontSize={\"26px\"}>\n          {title} <br />\n          {desc}\n        </Text>\n        <Spacer />\n        <Text color={\"light\"} fontSize={\"16px\"}>\n          Designer. Preloved. Vintage. Streetwear. Sneakers.\n          <br />\n          Designer. Preloved. Vintage. Streetwear. Sneakers.\n        </Text>\n\n        {/* <MeProtocolButton\n          name={buttonLabel}\n          rest={{\n            bg: \"light\",\n            px: \"10px\",\n            color: \"dark\",\n            w: [\"200px\", \"200px\"],\n          }}\n        /> */}\n      </Flex>\n      <Spacer />\n\n      {/* <Image src={design} w={\"40%\"} height={\"300px\"} opacity={0.9} /> */}\n      {/* ----------------------------------------------------------------RIGHT COLUMN ----------------------------------------------------------------*/}\n\n      <Spacer />\n\n      <Flex>{icon}</Flex>\n    </Flex>\n    // </Container>\n  );\n};\n\nexport default DashboardNewTopCard;\n\nconst useStyles = () => {\n  return {\n    root: {\n      bg: \"black\",\n      h: \"270px\",\n      w: \"100%\",\n      borderRadius: \"16px\",\n      p: \"2%\",\n      overflow: \"hidden\",\n    },\n  };\n};\n","import {\n  Flex,\n  Skeleton,\n  HStack,\n  Heading,\n  Box,\n  Text,\n  SimpleGrid,\n} from \"@chakra-ui/react\";\nimport { FC } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst SkeletonLoader: FC = (): JSX.Element => {\n  const { root } = useStyles();\n  return (\n    <SimpleGrid\n      columns={[2, 2, 3, 4, 4]}\n      w={\"100%\"}\n      spacingX={[\"35px\", \"35px\", \"35px\", \"15px\", \"35px\"]}\n      spacingY={\"5px\"}\n    >\n      {[1, 2, 3, 4]?.map(() => (\n        <Flex {...root} flexDir={\"column\"} key={nanoid()}>\n          <Box w={\"280px\"}>\n            <Skeleton\n              borderRadius={{ base: \"8px\", md: \"16px\" }}\n              isLoaded={false}\n            >\n              <Flex\n                w={\"280px\"}\n                h={\"280px\"}\n                borderRadius={{ base: \"8px\", md: \"16px\" }}\n                flexDir={\"column\"}\n                bg={\"#99999951\"}\n                overflow=\"hidden\"\n                className=\"card-hover\"\n                as=\"button\"\n              >\n                {/* OVERLAY */}\n                <Box\n                  pos={\"absolute\"}\n                  borderRadius={{ base: \"8px\", md: \"16px\" }}\n                  w={\"280px\"}\n                  h={\"280px\"}\n                  bg={\"#99999951\"}\n                />\n              </Flex>\n            </Skeleton>\n            <Flex flexDir={\"column\"} mt={\"2%\"}>\n              <Flex w={\"280px\"} justify={\"space-between\"} align={\"center\"}>\n                <Skeleton\n                  borderRadius={{ base: \"8px\", md: \"16px\" }}\n                  isLoaded={false}\n                >\n                  <Text\n                    fontSize={[\"10px\", \"10px\", \"14px\", \"16px\", \"16px\"]}\n                    noOfLines={1}\n                  >\n                    productTitle\n                  </Text>\n                </Skeleton>\n              </Flex>\n              <Skeleton\n                borderRadius={{ base: \"8px\", md: \"16px\" }}\n                isLoaded={false}\n              >\n                <Text\n                  fontSize={[\"8px\", \"8px\", \"12px\", \"14px\", \"14px\"]}\n                  opacity={0.7}\n                  noOfLines={1}\n                >\n                  points\n                </Text>\n              </Skeleton>\n\n              <Skeleton\n                borderRadius={{ base: \"8px\", md: \"16px\" }}\n                isLoaded={false}\n              >\n                <HStack>\n                  <Heading fontSize={[\"10px\", \"10px\", \"14px\", \"16px\", \"16px\"]}>\n                    points\n                  </Heading>\n                  <Text fontSize={[\"10px\", \"10px\", \"14px\", \"16px\", \"16px\"]}>\n                    price\n                  </Text>\n                </HStack>\n              </Skeleton>\n            </Flex>\n          </Box>\n        </Flex>\n      ))}\n    </SimpleGrid>\n  );\n};\n\nexport default SkeletonLoader;\n\nconst useStyles = () => {\n  return {\n    root: {\n      //   w: \"90vw\",\n      pt: \"2vh\",\n      align: \"center\",\n      pb: \"2%\",\n      borderRadius: \"16px\",\n    },\n  };\n};\n","import { Flex, Skeleton, Spinner, Stack } from \"@chakra-ui/react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { nanoid } from \"nanoid\";\nimport React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport Images_Icons from \"../../../constants/icons-images\";\nimport { DashExploreIcon, DashIcon2 } from \"../../../assets/iconsSvg/iconsSvg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AuthReducerProps } from \"../../../interfaces\";\nimport { RootState } from \"../../../redux/store\";\nimport {\n  CategoryType,\n  useGetBrandCategoryQuery,\n  useGetCategoriesQuery,\n} from \"../../../redux/rtkQuery/api\";\nimport OffersCategory from \"../../../bulkComponents/OffersCategory\";\nimport Container from \"../../../components/Container\";\nimport SkeletonLoader from \"../../../components/SkeletonLoader\";\nimport { Dispatch } from \"redux\";\nimport DashboardNewTopCard from \"../../../components/DashboardNewTopCard\";\nimport { getUserInfo, getUserCollection } from \"../../../redux/UserSlice\";\nimport { useDashboardStyles } from \"../Dashboard/styles\";\nimport { GLOBAL_PREFIX } from \"../../../constants\";\nconst Footer = lazy(() => import(\"../../../components/Footer\"));\nconst DashboardTopCard = lazy(() => import(\"../../../components/DashboardTopCard\"));\nconst Breadcrumbs = lazy(() => import(\"../../../components/Breadcrumbs\"));\n// const DashboardNavBar = lazy(\n//   () => import(\"../../../components/DashboardNavBar\")\n// );\nconst NewDashboardNavBar = lazy(() => import(\"../../../components/NewDashboardNavBar\"));\n\nconst DashboardCategory = (): JSX.Element => {\n  const [isLoaded, setIsLoaded] = useState<boolean>(true);\n  const { root } = useDashboardStyles();\n\n  const dispatch = useDispatch<Dispatch>();\n\n  let navigate = useNavigate();\n\n  const { token }: AuthReducerProps = useSelector((state: RootState) => state.authReducer);\n  const { data: categoriesData, isLoading } = useGetCategoriesQuery(\n    { page: 1, limit: 8, type: CategoryType.PRODUCT },\n    {\n      refetchOnMountOrArgChange: true,\n      // refetchOnMountOrArgChange: 300,\n    }\n  );\n\n  // console.log(isLoading);\n\n  // useEffect(() => {\n  //   if (token) {\n  //     // if (token) dispatch(getUserInfo({ token }));\n  //     dispatch(getUserCollection({ token }));\n  //   }\n  // }, [token]);\n\n  return (\n    <Flex flexDir={\"column\"}>\n      {/* ----------------------------------------------------------------------NAV BAR------------------------------------------------------------ */}\n      <Suspense fallback={<Spinner size=\"sm\" />}>\n        {/* <DashboardNavBar borderBottomRightRadius={\"0px\"} /> */}\n        <NewDashboardNavBar />\n      </Suspense>\n\n      {/* ----------------------------------------------------------------------TOP CARD------------------------------------------------------------ */}\n      <Container>\n        <Stack {...root}>\n          <Suspense fallback={<Spinner size=\"sm\" />}>\n            {/* <Container> */}\n            <Breadcrumbs\n              breadcrumbs={[\n                { name: \"Home\", link: `${GLOBAL_PREFIX}/dashboard` },\n                {\n                  name: \"Categories\",\n                  link: `${GLOBAL_PREFIX}/dashboard/category`,\n                  isCurrentPage: true,\n                },\n              ]}\n            />\n            {/* </Container> */}\n          </Suspense>\n\n          <Suspense fallback={<Spinner size=\"sm\" />}>\n            <DashboardNewTopCard\n              title={`Get inspired. Browse`}\n              desc={\"offers\"}\n              buttonLabel={\"\"}\n              icon={<DashExploreIcon color={\"#FFFFFF\"} w={\"330px\"} h={\"300px\"} />}\n              design={\"\"}\n              // design={Images_Icons.dashboardCardDesign2}\n              onClick={() => {\n                navigate(`${GLOBAL_PREFIX}/dashboard/shop`);\n              }}\n            />\n          </Suspense>\n\n          {/* ----------------------------------------------------------------------OUTDOOR ACTIVITIES------------------------------------------------------------ */}\n\n          {isLoading ? (\n            <SkeletonLoader />\n          ) : (\n            <>\n              {categoriesData?.data?.categories?.map((e) => (\n                <OffersCategory\n                  key={nanoid()}\n                  categoryName={e.name}\n                  category_id={e.id}\n                  loaded={!isLoading}\n                  rest={{ ...e }}\n                />\n              ))}\n            </>\n          )}\n        </Stack>\n      </Container>\n\n      <Suspense fallback={<Spinner size=\"sm\" />}>\n        <Footer />\n      </Suspense>\n    </Flex>\n  );\n};\n\nexport default DashboardCategory;\n"],"names":["DashboardProductItem","lazy","_ref","categoryName","category_id","_ref$HeaderShown","HeaderShown","rest","loaded","navigate","useNavigate","_useDashboardStyles","useToast","useDashboardStyles","nameStyles","loadMore","button","_useState","useState","_useState2","_slicedToArray","page","setPage","_useState3","_useState4","loadedOffers","setLoadedOffers","_useState5","_useState6","_useState7","_useState8","reachedEnd","setReachedEnd","_useState9","_useState10","_useState11","_useState12","offersFetching","setOffersFetching","_GET_CATEGORIES_OFFERS","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_data$data","_data$data2","_yield$axios$get","data","wrap","_context","prev","next","axios","concat","BASE_URL","sent","offers","length","_toConsumableArray","t0","console","log","finish","stop","apply","arguments","useEffect","GET_CATEGORIES_OFFERS","_jsx","Skeleton","borderRadius","isLoaded","children","_jsxs","Stack","Flex","w","pt","HStack","PopularDeaslsSvg","Heading","_objectSpread","Spacer","Suspense","fallback","Spinner","size","Center","bg","color","px","py","as","onClick","GLOBAL_PREFIX","state","SimpleGrid","columns","spacingX","map","e","i","_e$reward","_e$product","_e$product$category","productTitle","name","points","tokens","reward","rewardSymbol","productSubtitle","product","category","price","originalPrice","isNew","moment","diff","createdAt","bgImage","offerImages","offerCode","nanoid","Button","_Fragment","Icon","FaAngleDown","ml","title","desc","icon","buttonLabel","design","root","useStyles","pos","className","flexDir","Text","fontSize","h","p","overflow","spacingY","_createElement","key","Box","base","md","mt","justify","align","noOfLines","opacity","pb","Footer","Breadcrumbs","NewDashboardNavBar","_categoriesData$data","_categoriesData$data$","useDispatch","_useGetCategoriesQuer","useSelector","authReducer","token","useGetCategoriesQuery","limit","type","CategoryType","refetchOnMountOrArgChange","categoriesData","isLoading","Container","breadcrumbs","link","isCurrentPage","DashboardNewTopCard","DashExploreIcon","SkeletonLoader","categories","OffersCategory","id"],"sourceRoot":""}