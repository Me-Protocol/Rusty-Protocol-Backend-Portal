{"version":3,"file":"static/js/6434.1628ebc5.chunk.js","mappings":"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","sources":["components/MeProtocolFormikButton/index.tsx","components/TopIconBar/index.tsx","pages/AuthenticationModule/Login/Login.tsx","pages/AuthenticationModule/PasswordReset/PasswordReset.tsx","../node_modules/@chakra-ui/layout/src/link.tsx"],"sourcesContent":["// @flow\nimport { FC, memo } from \"react\";\nimport { Button } from \"@chakra-ui/react\";\nimport { MeProtocolFormikButtonProps } from \"../../interfaces\";\n\nconst MeProtocolFormikButton: FC<MeProtocolFormikButtonProps> = ({\n  name,\n  isLoading,\n  onClick,\n  isDisabled,\n  rest,\n}): JSX.Element => {\n  const { root } = useStyles();\n\n  return (\n    <>\n      <Button\n        type={\"submit\"}\n        isDisabled={isDisabled}\n        isLoading={isLoading}\n        onClick={onClick}\n        {...root}\n        {...rest}\n      >\n        {name}\n      </Button>\n    </>\n  );\n};\n\nexport default memo(MeProtocolFormikButton);\n\nconst useStyles = () => {\n  return {\n    root: {\n      colorScheme: \"black\",\n      bg: \"black\",\n      py: {\n        base: 5,\n      },\n      width: \"100%\",\n      h: \"45px\",\n      borderRadius: \"100px\",\n      loadingText: \"Submitting\",\n      fontSize: {\n        base: 12,\n        md: 18,\n      },\n    },\n  };\n};\n","// @flow\nimport React, { lazy, FC, memo } from \"react\";\nimport { Flex, Image } from \"@chakra-ui/react\";\nimport iconsImages from \"../../constants/icons-images\";\nimport { useNavigate } from \"react-router-dom\";\nimport Container from \"../Container\";\nimport { useSelector } from \"react-redux\";\nimport { AuthReducerProps } from \"../../interfaces\";\nimport { RootState } from \"../../redux/store\";\nimport { GLOBAL_PREFIX } from \"../../constants\";\n\ninterface TopIconBarProps {\n  pos?: any;\n}\n\nconst TopIconBar: FC<TopIconBarProps> = ({ pos }): JSX.Element => {\n  let navigate = useNavigate();\n\n  const { token }: AuthReducerProps = useSelector(\n    (state: RootState) => state.authReducer\n  );\n\n  const { styles, img } = useStyles();\n  return (\n    <Container>\n      <Flex\n        as={\"button\"}\n        onClick={() => {\n          token\n            ? navigate(`${GLOBAL_PREFIX}/dashboard`)\n            : navigate(`${GLOBAL_PREFIX}/`);\n        }}\n        position={pos || \"absolute\"}\n        {...styles}\n      >\n        <Image\n          // as=\"button\"\n          data-testid={\"logo-1\"}\n          src={iconsImages.appLogo}\n          {...img}\n        />\n      </Flex>\n    </Container>\n  );\n};\n\nexport default memo(TopIconBar);\n\nconst useStyles = () => {\n  return {\n    styles: {\n      w: \"100%\",\n      h: \"50px\",\n      justifyContent: \"flex-start\",\n    },\n    img: {\n      mt: 5,\n      // w: \"80px\",\n      h: \"50px\",\n    },\n  };\n};\n","// @flow\nimport { Divider, Flex, Heading, Link, Spinner, Text, VStack } from \"@chakra-ui/react\";\nimport { lazy, Suspense, useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { Formik, FormikHelpers, FormikValues } from \"formik\";\nimport { AuthReducerProps, LoginFormikValues, UserReducerProps } from \"../../../interfaces\";\nimport { GLOBAL_PREFIX, LoginValidationSchema } from \"../../../constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { loginFn, resetErrorMsg } from \"../../../redux/AuthSlice\";\nimport { RootState } from \"../../../redux/store\";\nimport { useOnline } from \"rooks\";\nimport { BASE_URL } from \"../../../config\";\nimport Container from \"../../../components/Container\";\nimport { getUserInfo } from \"../../../redux/UserSlice\";\nconst TopIconBar = lazy(() => import(\"../../../components/TopIconBar\"));\nconst MeProtocolButton = lazy(() => import(\"../../../components/MeProtocolButton\"));\nconst MeProtocolFormikButton = lazy(() => import(\"../../../components/MeProtocolFormikButton\"));\nconst MeProtocolInput = lazy(() => import(\"../../../components/MeProtocolInput\"));\n\nexport const Login = () => {\n  let location = useLocation();\n  let navigate = useNavigate();\n  const online = useOnline();\n  const dispatch = useDispatch<Dispatch>();\n  const [googleLoading, setGoogleLoading] = useState<boolean>(false);\n  const { isLoading, error, token }: AuthReducerProps = useSelector(\n    (state: RootState) => state.authReducer\n  );\n  const { user_data }: UserReducerProps = useSelector((state: RootState) => state.userReducer);\n  const [errorMsg, setErrorMsg] = useState<string>(\" \");\n\n  const { root, boxLeft, boxLogin, leftImg, loginColumn, head, desc } = useStyles();\n  // useEffect(() => {\n  //   if (!token) {\n  //     navigate(`${GLOBAL_PREFIX}/login`);\n  //   }\n  // });\n\n  useEffect(() => {\n    dispatch(resetErrorMsg());\n    // console.log(location, \"LOCAAA\");\n\n    if (token) {\n      dispatch(resetErrorMsg());\n      navigate(`${GLOBAL_PREFIX}/dashboard`);\n    }\n  }, [dispatch, token, navigate]);\n\n  const onSubmit = async (\n    { email, password }: FormikValues,\n    actions: FormikHelpers<LoginFormikValues>\n  ) => {\n    if (!online) return;\n    // const data: any = await dispatch(loginFn({email, password}));\n    // console.log(data, \"TESRRRSE\")\n    // return\n    const { payload, error }: any = await dispatch(loginFn({ identifier: email, password }));\n    if (error) {\n      return setErrorMsg(error?.message);\n    }\n\n    if (payload) {\n      const { payload: userPayload }: any = await dispatch(getUserInfo({ token: payload }));\n\n      if (userPayload?.customer?.walletAddress) {\n        navigate(`${GLOBAL_PREFIX}/dashboard`);\n      } else {\n        navigate(`${GLOBAL_PREFIX}/syncRewards`);\n      }\n    }\n    // if (payload) {\n    //   // IF PHONE IS NOT ADDED GO TO PHONE VERIFICATION PAGE\n    //   if (payload?.access_token?.phones?.length < 1) {\n    //     navigate(`${GLOBAL_PREFIX}/phone_auth`, {\n    //       state: payload?.access_token,\n    //     });\n    //     return;\n    //   }\n    //   // IF PHONE NUMBER IS ADDED BUT 2FA IS ENABLED GO TO PHONE CODE VERIFICATION PAGE\n    //   if (payload?.access_token?.phones?.length > 0) {\n    //     const { status }: { status: number } = await axios.get(\n    //       `${BASE_URL}/users/phone/${payload?.access_token?.phones[0].phone}/${payload?.access_token?.user?.userId}`\n    //     );\n    //     if (status === 200) {\n    //       navigate(`${GLOBAL_PREFIX}/code_input`, {\n    //         state: {\n    //           state: payload?.access_token,\n    //           value: payload?.access_token?.phones[0],\n    //         },\n    //       });\n    //     }\n    //     return;\n    //   }\n    //   //IF 2FA IS DISABLED LOGIN DIRECTLY\n    //   if (payload?.access_token?.token) {\n    //     // console.log(payload, \"JJOOPOJHUHUUHU\");\n    //     // navigate(`${GLOBAL_PREFIX}/dashboard`);\n\n    //     await dispatch(getUserInfo({ token: payload?.access_token?.token }));\n    //     dispatch(GET_WALLETS({ token: payload?.access_token?.token }));\n    //     dispatch(getUserCollection({ token: payload?.access_token?.token }));\n\n    //     if (user_data?.customer?.walletAddress) {\n    //       navigate(`${GLOBAL_PREFIX}/dashboard`);\n    //     } else {\n    //       navigate(`${GLOBAL_PREFIX}/syncRewards`);\n    //     }\n    //   }\n    // }\n  };\n\n  async function SignInWithGoogle() {\n    let config = {\n      method: \"post\",\n      url: `${BASE_URL}/user/google`,\n    };\n\n    try {\n      setGoogleLoading(true);\n      // const { data }: any = await axios(config);\n      // console.log(data,\"hhhhhhhh\")\n      // if (data) {\n      //   window.location.replace(data.url);\n      window.location.replace(`${BASE_URL}/user/google`);\n      // }\n    } catch (e: any | unknown) {\n      console.log(e, \"err google\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  async function SignInWithTwitter() {\n    try {\n      window.location.replace(`${BASE_URL}/users/twitter`);\n    } catch (e: any | unknown) {\n      console.log(e, \"err twitter\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  async function SignInWithFacebook() {\n    try {\n      window.location.replace(`${BASE_URL}/users/facebook`);\n    } catch (e: any | unknown) {\n      console.log(e, \"err twitter\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Container>\n        <Suspense fallback={<Spinner size=\"sm\" />}>\n          <TopIconBar pos={\"fixed\"} />\n        </Suspense>\n        <Flex {...root}>\n          <Flex {...boxLogin}>\n            <Formik\n              initialValues={{ email: \"\", password: \"\" }}\n              validationSchema={LoginValidationSchema}\n              //@ts-ignore\n              onSubmit={onSubmit}\n            >\n              {(formik) => (\n                <VStack\n                  as={\"form\"}\n                  {...loginColumn}\n                  //@ts-ignore\n                  onSubmit={formik.handleSubmit}\n                  onChange={() => dispatch(resetErrorMsg())}\n                >\n                  <Heading {...head} pb={2}>\n                    Let’s Login\n                  </Heading>\n\n                  <Flex w={\"100%\"} justify={\"space-between\"}>\n                    <Suspense fallback={<Spinner size=\"sm\" />}>\n                      <MeProtocolButton\n                        isLoading={googleLoading}\n                        name={\"Sign in with Google\"}\n                        onClick={() => {\n                          window.location.replace(`${BASE_URL}/user/google`);\n                        }}\n                        // onClick={SignInWithGoogle}\n                        rest={{ w: \"100%\" }}\n                      />\n                    </Suspense>\n\n                    {/* <Flex w={\"25%\"} justify={\"space-between\"}>\n                      <Center\n                        as={Button}\n                        bg={\"#F6F6F6\"}\n                        h={\"40px\"}\n                        w={\"65px\"}\n                        borderRadius={\"25px\"}\n                        onClick={SignInWithFacebook}\n                        _hover={{ bg: \"black\", color: \"light\" }}\n                        role=\"group\"\n                      >\n                        <Icon\n                          color={\"#999999\"}\n                          w={\"20px\"}\n                          h={\"20px\"}\n                          as={FaFacebookSquare}\n                          _groupHover={{ color: \"light\" }}\n                        />\n                      </Center>\n\n                      <Center\n                        as={Button}\n                        bg={\"#F6F6F6\"}\n                        h={\"40px\"}\n                        w={\"65px\"}\n                        ml=\"5px\"\n                        borderRadius={\"25px\"}\n                        onClick={SignInWithTwitter}\n                        _hover={{ bg: \"black\", color: \"light\" }}\n                        role=\"group\"\n                      >\n                        <Icon\n                          color={\"#999999\"}\n                          w={\"20px\"}\n                          h={\"20px\"}\n                          as={FaTwitter}\n                          // _hover={{ color: \"light\" }}\n                          _groupHover={{ color: \"light\" }}\n                        />\n                      </Center>\n                    </Flex> */}\n                  </Flex>\n                  <Flex align={\"center\"} w={\"100%\"} justify={\"space-between\"}>\n                    <Divider w={\"45%\"} color={\"#ECECEC\"} />\n                    <Text color={\"#999999\"} fontSize={{ base: \"12px\", md: \"20px\" }}>\n                      or\n                    </Text>\n                    <Divider w={\"45%\"} color={\"#ECECEC\"} />\n                  </Flex>\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    <MeProtocolInput name={\"email\"} type={\"email\"} placeholder={\"your@email.com\"} />\n\n                    <MeProtocolInput name={\"password\"} type={\"password\"} placeholder={\"Password\"} />\n                  </Suspense>\n\n                  {errorMsg && (\n                    <Text {...desc} color={\"red\"}>\n                      {errorMsg}\n                    </Text>\n                  )}\n                  <Link\n                    onClick={() => navigate(`${GLOBAL_PREFIX}/password_reset`)}\n                    {...desc}\n                    py={3}\n                    textDecoration={\"underline\"}\n                    w={\"30%\"}\n                  >\n                    Forgot Password\n                  </Link>\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    <MeProtocolFormikButton isLoading={isLoading} name={\"Login\"} />\n                  </Suspense>\n\n                  <Text {...desc} pt={\"10px\"}>\n                    Don’t have an account yet?\n                    <Link\n                      onClick={() => {\n                        navigate(`${GLOBAL_PREFIX}/register`);\n                      }}\n                      textDecoration={\"underline\"}\n                    >\n                      {\" \"}\n                      Create one here.\n                    </Link>\n                  </Text>\n                </VStack>\n              )}\n            </Formik>\n          </Flex>\n        </Flex>\n      </Container>\n    </>\n  );\n};\n\nexport default Login;\n\nexport const useStyles = () => {\n  return {\n    root: {\n      h: \"100vh\",\n      align: \"center\",\n      justify: \"center\",\n      bg: \"light\",\n    },\n    boxLeft: {\n      display: [\"none\", \"none\", \"none\", \"flex\", \"flex\"],\n      bg: \"light\",\n      fontSize: 40,\n      h: \"100%\",\n      w: \"40vw\",\n    },\n    boxLogin: {\n      // bg: \"light\",\n      // bg: \"red\",\n      fontSize: 40,\n      // justify: \"center\",\n      h: \"100%\",\n      w: [\"100%\", \"100%\", \"80%\", \"50%\", \"50%\"],\n      overflow: \"hidden\",\n    },\n    boxRegister: {\n      fontSize: 40,\n      h: \"100vh\",\n      w: [\"100%\", \"100%\", \"80%\", \"80%\", \"70%\"],\n      justify: \"center\",\n    },\n    leftImg: {\n      h: \"100%\",\n      w: \"100%\",\n    },\n    loginColumn: {\n      bg: \"light\",\n      w: \"100%\",\n      align: \"flex-start\",\n      pt: {\n        base: \"5vh\",\n        md: \"10vh\",\n      },\n      px: {\n        base: \"15px\",\n      },\n      justifySelf: \"center\",\n    },\n    registerColumn: {\n      bg: \"light\",\n      w: [\"100%\", \"100%\", \"100%\", \"80%\", \"70%\"],\n      align: \"flex-start\",\n      pt: {\n        base: \"5vh\",\n        md: \"10vh\",\n      },\n      px: {\n        base: \"15px\",\n        // md: 20\n      },\n      justifySelf: \"center\",\n    },\n    head: {\n      fontSize: {\n        base: \"18px\",\n        md: \"25px\",\n      },\n      pt: \"20px\",\n    },\n    desc: {\n      pb: \"5px\",\n      fontSize: {\n        base: \"15px\",\n        md: \"17px\",\n      },\n      w: {\n        base: \"100%\",\n        md: \"85%\",\n      },\n    },\n    basedText: {\n      pt: \"30px\",\n      fontSize: {\n        base: \"18px\",\n        md: \"20px\",\n      },\n    },\n    checkBoxRoot: {\n      py: \"20px\",\n    },\n    countrySelect: {\n      w: {\n        base: \"100%\",\n        md: \"100%\",\n      },\n      bg: \"grey\",\n      color: \"dark\",\n      borderColor: \"light\",\n      borderWidth: \"1px\",\n      align: \"center\",\n    },\n  };\n};\n","// @flow\nimport {\n  Flex,\n  Heading,\n  Image,\n  Input,\n  InputGroup,\n  InputLeftAddon,\n  Text,\n  useToast,\n  VStack,\n} from \"@chakra-ui/react\";\nimport Images_Icons from \"../../../constants/icons-images\";\nimport { useState } from \"react\";\nimport MeProtocolButton from \"../../../components/MeProtocolFormikButton\";\nimport TopIconBar from \"../../../components/TopIconBar\";\nimport { useNavigate } from \"react-router-dom\";\nimport CountrySelector from \"../../../components/CountrySelector\";\nimport { useStyles } from \"../Login/Login\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../../../config\";\nimport { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { GLOBAL_PREFIX } from \"../../../constants\";\n\nexport const PasswordReset = () => {\n  let navigate = useNavigate();\n  // const dispatch = useDispatch<Dispatch>()\n  // const {user_data} = useSelector((state: RootState) => state.userReducer)\n  const dispatch = useDispatch<Dispatch>();\n  const toast = useToast();\n\n  const {\n    root,\n    boxLeft,\n    boxLogin,\n    leftImg,\n    loginColumn,\n    boxRegister,\n    head,\n    desc,\n    registerColumn,\n  } = useStyles();\n  const { root2, countrySelect } = usePhoneAuthStyles();\n\n  const [country, setCountry] = useState<string>(\"566\");\n\n  const [email, setEmail] = useState<string>(\"\");\n  const [errMsg, setErrMsg] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n\n  async function SendResetLink() {\n    try {\n      setLoading(true);\n      const { data }: any = await axios.post(\n        `${BASE_URL}/users/password/request-email-code`,\n        {\n          email,\n        }\n      );\n      // console.log(data, \"E GOOO???\")\n      if (data?.reset) {\n        navigate(`${GLOBAL_PREFIX}/password/${email}`);\n        toast({\n          position: \"top\",\n          title: \"Reset link sent\",\n          description: \"Please click the link sent to your email\",\n          status: \"success\",\n          duration: 9000,\n          isClosable: true,\n        });\n      }\n    } catch (e: any | unknown) {\n      console.log(e, \"SendResetLinkErr\");\n      setErrMsg(e?.response?.data?.error);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Flex pos={\"absolute\"}>\n        <TopIconBar pos=\"fixed\" />\n      </Flex>\n      <Flex {...root}>\n        <Flex {...boxLeft}>\n          <Image src={Images_Icons.AuthImage} alt=\"Me Protocol\" {...leftImg} />\n        </Flex>\n        <Flex {...boxRegister}>\n          <VStack {...registerColumn}>\n            <Heading {...head} pb={2}>\n              Reset password\n            </Heading>\n            <Text {...desc}>A reset link will be sent to your email.</Text>\n\n            <InputGroup {...root2}>\n              <Input\n                h={\"100%\"}\n                borderRadius={58}\n                value={email}\n                onChange={({ target }: any) => {\n                  setEmail(target.value);\n                  setErrMsg(\"\");\n                }}\n                boxShadow={\"none\"}\n                outline={\"none\"}\n                type=\"email\"\n                placeholder=\"your@email.com\"\n              />\n            </InputGroup>\n            <Text color={\"red\"} {...desc}>\n              {errMsg}\n            </Text>\n\n            {/*<PhoneInput*/}\n            {/*    className={\"phoneInput\"}*/}\n            {/*    placeholder=\"Enter phone number\"*/}\n            {/*    value={value}*/}\n            {/*    withCountryCallingCode*/}\n            {/*    onChange={setValue}/>*/}\n            <MeProtocolButton\n              isLoading={loading}\n              isDisabled={!email.includes(\"@\")}\n              name={\"Next\"}\n              onClick={SendResetLink}\n            />\n          </VStack>\n        </Flex>\n      </Flex>\n    </>\n  );\n};\n\nexport default PasswordReset;\n\nconst usePhoneAuthStyles = () => {\n  return {\n    root2: {\n      w: \"100%\",\n      h: \"48px\",\n      align: \"center\",\n      justify: \"center\",\n      // borderRadius: 58,\n      px: \"0px\",\n      bg: \"grey\",\n      borderWidth: 0,\n      borderColor: \"transparent\",\n      outline: \"none\",\n      boxShadow: \"none\",\n      borderRadius: 58,\n    },\n    countrySelect: {\n      w: \"100%\",\n      // bg: \"black\",\n      color: \"dark\",\n      // borderColor: \"light\",\n      borderWidth: \"0px\",\n      // my: \"30px\",\n    },\n  };\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">(function Link(props, ref) {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nLink.displayName = \"Link\"\n"],"names":["MeProtocolFormikButton","_ref","name","isLoading","onClick","isDisabled","rest","root","useStyles","_jsx","_Fragment","children","Button","_objectSpread","type","memo","colorScheme","bg","py","base","width","h","borderRadius","loadingText","fontSize","md","TopIconBar","pos","navigate","useNavigate","token","useSelector","state","authReducer","_useStyles","styles","img","Container","Flex","as","concat","GLOBAL_PREFIX","position","Image","src","iconsImages","w","justifyContent","mt","lazy","MeProtocolButton","MeProtocolInput","useLocation","online","useOnline","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","googleLoading","_useSelector","error","_useState3","userReducer","user_data","_useState4","errorMsg","setErrorMsg","boxLogin","boxLeft","loginColumn","leftImg","head","desc","useEffect","resetErrorMsg","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","actions","email","password","_yield$dispatch","payload","_userPayload$customer","_yield$dispatch2","userPayload","wrap","_context","prev","next","abrupt","loginFn","identifier","sent","message","getUserInfo","customer","walletAddress","stop","_x","_x2","apply","arguments","_jsxs","Suspense","fallback","Spinner","size","Formik","initialValues","validationSchema","LoginValidationSchema","formik","VStack","handleSubmit","onChange","Heading","pb","justify","window","location","replace","BASE_URL","align","Divider","color","Text","placeholder","Link","textDecoration","pt","display","overflow","boxRegister","px","justifySelf","registerColumn","basedText","checkBoxRoot","countrySelect","borderColor","borderWidth","toast","useToast","_usePhoneAuthStyles","usePhoneAuthStyles","root2","setEmail","_useState5","_useState6","errMsg","setErrMsg","_useState7","_useState8","loading","setLoading","_SendResetLink","_yield$axios$post","data","_e$response","_e$response$data","axios","reset","title","description","status","duration","isClosable","t0","console","log","response","finish","Images_Icons","alt","InputGroup","Input","value","target","boxShadow","outline","includes","forwardRef","props","ref","useStyleConfig","_omitThemingProps","omitThemingProps","className","isExternal","_objectWithoutProperties","_excluded","jsx","chakra","rel","cx","__css","displayName"],"sourceRoot":""}