{"version":3,"file":"static/js/4884.01ca1586.chunk.js","mappings":"wPAeMA,EAAkC,SAAHC,GAA8B,IAAxBC,EAAGD,EAAHC,IACrCC,GAAWC,EAAAA,EAAAA,MAEPC,GAA4BC,EAAAA,EAAAA,KAClC,SAACC,GAAgB,OAAKA,EAAMC,WAAW,IADjCH,MAIRI,EAAwBC,IAAhBC,EAAMF,EAANE,OAAQC,EAAGH,EAAHG,IAChB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,QAAS,CAAAC,UACRF,EAAAA,EAAAA,KAACG,EAAAA,GAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACHC,GAAI,SACJC,QAAS,WAEHhB,EAAS,GAADiB,OAAIC,EAAAA,GADhBhB,EAC6B,aACA,KAC/B,EACAiB,SAAUpB,GAAO,YACbS,GAAM,IAAAI,UAEVF,EAAAA,EAAAA,KAACU,EAAAA,GACCN,EAAAA,EAAAA,GAAA,CACA,cAAa,SACbO,IAAKC,EAAAA,EAAAA,SACDb,QAKd,EAEA,WAAec,EAAAA,EAAAA,MAAK1B,GAEpB,IAAMU,EAAY,WAChB,MAAO,CACLC,OAAQ,CACNgB,EAAG,OACHC,EAAG,OACHC,eAAgB,cAElBjB,IAAK,CACHkB,GAAI,EAEJF,EAAG,QAGT,C,kUC6HA,EA3JiC,YAChBxB,EAAAA,EAAAA,MAAf,IACM2B,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAEN3B,GAA0B4B,EAAAA,EAAAA,MAA1B5B,MAERE,GACEC,EAAAA,EAAAA,MADM0B,EAAI3B,EAAJ2B,KAAMC,EAAO5B,EAAP4B,QAASC,EAAQ7B,EAAR6B,SAAUC,EAAO9B,EAAP8B,QAASC,EAAW/B,EAAX+B,YAAaC,EAAIhC,EAAJgC,KAAMC,EAAIjC,EAAJiC,KAE7DC,GAOsBrC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,WAAW,IALvEoC,GADKD,EAALtC,MACgBsC,EAAhBC,kBACAC,EAAiBF,EAAjBE,kBACAC,EAAoBH,EAApBG,qBACAC,EAAmBJ,EAAnBI,oBACoBJ,EAApBK,qBAqEiC,SAAAC,IAsBlC,OAtBkCA,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAnC,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEgCC,IAAAA,KAAW,GAADxC,OAAIyC,EAAAA,GAAQ,gBAAgB,CAChEC,MAAOlB,EAAiBkB,MACxBC,OAAQnB,EAAiBmB,SACxB,KAAD,EAAAT,EAAAG,EAAAO,KAHMT,EAAID,EAAJC,KAKRU,QAAQC,IAAIX,EAAM,aAEdA,GACFtB,EAAM,CACJX,SAAU,MACV6C,MAAM,yBACNC,YAAa,qDACbC,OAAQ,UACRC,SAAU,IACVC,YAAY,IAEfd,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAe,GAAAf,EAAA,SAEDQ,QAAQC,IAAGT,EAAAe,GAAI,2BAA2B,yBAAAf,EAAAgB,OAAA,GAAApB,EAAA,mBAE7CqB,MAAA,KAAAC,UAAA,CAED,OA1FAC,EAAAA,EAAAA,YAAU,WAER,IAAKrE,EAAO,CACV,GAAIsC,EAAmB,CACrB,IAAMgC,EAAK,cACN5C,EAAM6C,SAASD,KAClB5C,EAAM,CACJ4C,GAAAA,EACAvD,SAAU,MACV6C,MAAM,GAAD/C,OAAK0B,GACVsB,YACE,2DACFC,OAAQ,QACRC,SAAU,IACVC,YAAY,IAEdxC,GAASgD,EAAAA,EAAAA,OAEb,CACAhD,GAASgD,EAAAA,EAAAA,MACX,CACF,GAAG,KAEHH,EAAAA,EAAAA,YAAU,WAyCV,GAAG,KA2BDI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAlE,SAAA,EACEF,EAAAA,EAAAA,KAACb,EAAAA,QAAU,KACXgF,EAAAA,EAAAA,MAAChE,EAAAA,GAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKmB,GAAI,IAAArB,SAAA,EACZF,EAAAA,EAAAA,KAACG,EAAAA,GAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKoB,GAAO,IAAAtB,UACfF,EAAAA,EAAAA,KAACU,EAAAA,GAAKN,EAAAA,EAAAA,GAAA,CAACO,IAAK0D,EAAAA,EAAAA,UAAwBC,IAAI,eAAkB5C,QAE5DyC,EAAAA,EAAAA,MAAChE,EAAAA,GAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKqB,GAAQ,IAAAvB,SAAA,CACfgC,IACClC,EAAAA,EAAAA,KAACuE,EAAAA,EAAM,CACLlF,IAAK,WACLyB,EAAG,MACHC,EAAG,OACHyD,GAAI,yBAAyBtE,UAE7BF,EAAAA,EAAAA,KAACyE,EAAAA,EAAO,CAACC,KAAM,UAGnBP,EAAAA,EAAAA,MAACQ,EAAAA,GAAMvE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKuB,GAAW,IAAAzB,SAAA,EACrBF,EAAAA,EAAAA,KAAC4E,EAAAA,GAAOxE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKwB,GAAI,IAAEiD,GAAI,EAAE3E,SAAC,gCAG1BF,EAAAA,EAAAA,KAAC8E,EAAAA,GAAI1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKyB,GAAI,IAAA3B,SAAE,mJAKhBiE,EAAAA,EAAAA,MAACW,EAAAA,GAAI1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAC2E,QAAS,OAAWlD,GAAI,IAAEmD,eAAgB,YAAY9E,SAAA,CAAC,gCAC7B,KAC9BF,EAAAA,EAAAA,KAACiF,EAAAA,EAAQ,CACPC,QAAS,EACTC,QAAS,EACTC,KAAK,IACLC,WAAW,SACXC,OA5DP,WAE4B,OAAAlD,EAAAyB,MAAC,KAADC,UAAA,EA2DrByB,WAAY,4BAU5B,C,6SCzKMpG,GAAaqG,EAAAA,EAAAA,OAAK,kBAAM,+BAAwC,IAChEC,GAAmBD,EAAAA,EAAAA,OAAK,kBAAM,sCAA8C,IAC5EE,GAAyBF,EAAAA,EAAAA,OAAK,kBAAM,+BAAoD,IACxFG,GAAkBH,EAAAA,EAAAA,OAAK,kBAAM,8BAA6C,IA6QhF,KA3QqB,YACJlE,EAAAA,EAAAA,MAAf,IACIhC,GAAWC,EAAAA,EAAAA,MACTqG,GAASC,EAAAA,EAAAA,KACT3E,GAAWC,EAAAA,EAAAA,MACjB2E,GAA0CC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3DI,EAAaF,EAAA,GACpBlE,GADsCkE,EAAA,IACgBvG,EAAAA,EAAAA,KACpD,SAACC,GAAgB,OAAKA,EAAMC,WAAW,KADjCwG,EAASrE,EAATqE,UAAkB3G,GAAFsC,EAALsE,MAAYtE,EAALtC,OAI1B6G,IADwC5G,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAM4G,WAAW,IAAnFC,WACwBR,EAAAA,EAAAA,UAAiB,MAAIS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA9CI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAE5B5G,EAAsEC,IAA9D0B,EAAI3B,EAAJ2B,KAAeE,GAAF7B,EAAP4B,QAAiB5B,EAAR6B,UAAmBE,GAAF/B,EAAP8B,QAAoB9B,EAAX+B,aAAaC,EAAIhC,EAAJgC,KAAMC,EAAIjC,EAAJiC,MAO7DkC,EAAAA,EAAAA,YAAU,WACR7C,GAASgD,EAAAA,EAAAA,OAGL1E,IACF0B,GAASgD,EAAAA,EAAAA,OACT5E,EAAS,GAADiB,OAAIC,EAAAA,GAAa,eAE7B,GAAG,CAACU,EAAU1B,EAAOF,IAErB,IAAMqH,EAAQ,eAAAC,GAAAvE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsE,EAAAzH,EAEf0H,GAAyC,IAAA7D,EAAA8D,EAAAC,EAAAC,EAAAb,EAAAc,EAAAC,EAAAC,EAAA,OAAA9E,EAAAA,EAAAA,KAAAK,MAAA,SAAA0E,GAAA,cAAAA,EAAAxE,KAAAwE,EAAAvE,MAAA,OADxB,GAAfG,EAAK7D,EAAL6D,MAAO8D,EAAQ3H,EAAR2H,SAGJnB,EAAO,CAADyB,EAAAvE,KAAA,eAAAuE,EAAAC,OAAA,wBAAAD,EAAAvE,KAAA,EAI2B5B,GAASqG,EAAAA,EAAAA,IAAQ,CAAEC,WAAYvE,EAAO8D,SAAAA,KAAa,KAAD,EAAlE,GAAkEC,EAAAK,EAAAlE,KAAhF8D,EAAOD,EAAPC,UAASb,EAAKY,EAALZ,OACP,CAADiB,EAAAvE,KAAA,gBAAAuE,EAAAC,OAAA,SACAZ,EAAiB,OAALN,QAAK,IAALA,OAAK,EAALA,EAAOqB,UAAQ,YAGhCR,EAAQ,CAADI,EAAAvE,KAAA,gBAAAuE,EAAAvE,KAAA,GACmC5B,GAASwG,EAAAA,EAAAA,IAAY,CAAElI,MAAOyH,KAAY,KAAD,GAAAE,EAAAE,EAAAlE,KAEtE,QAFEiE,EAAWD,EAApBF,eAEO,IAAXG,GAAqB,QAAVF,EAAXE,EAAaO,gBAAQ,IAAAT,GAArBA,EAAuBU,cACzBtI,EAAS,GAADiB,OAAIC,EAAAA,GAAa,eAEzBlB,EAAS,GAADiB,OAAIC,EAAAA,GAAa,iBAC1B,yBAAA6G,EAAAzD,OAAA,GAAAiD,EAAA,KAyCJ,gBA7DagB,EAAAC,GAAA,OAAAlB,EAAA/C,MAAA,KAAAC,UAAA,KAwGd,OACE9D,EAAAA,EAAAA,KAAAoE,EAAAA,SAAA,CAAAlE,UACEiE,EAAAA,EAAAA,MAAClE,EAAAA,QAAS,CAAAC,SAAA,EACRF,EAAAA,EAAAA,KAAC+H,EAAAA,SAAQ,CAACC,UAAUhI,EAAAA,EAAAA,KAACyE,EAAAA,EAAO,CAACC,KAAK,OAAQxE,UACxCF,EAAAA,EAAAA,KAACb,EAAU,CAACE,IAAK,aAEnBW,EAAAA,EAAAA,KAACG,EAAAA,GAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKmB,GAAI,IAAArB,UACZF,EAAAA,EAAAA,KAACG,EAAAA,GAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKqB,GAAQ,IAAAvB,UAChBF,EAAAA,EAAAA,KAACiI,EAAAA,GAAM,CACLC,cAAe,CAAEjF,MAAO,GAAI8D,SAAU,IACtCoB,iBAAkBC,EAAAA,GAElBzB,SAAUA,EAASzG,SAElB,SAACmI,GAAM,OACNlE,EAAAA,EAAAA,MAACQ,EAAAA,GAAMvE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACLC,GAAI,QACAsB,GAAW,IAEfgF,SAAU0B,EAAOC,aACjBC,SAAU,kBAAMrH,GAASgD,EAAAA,EAAAA,MAAgB,EAAChE,SAAA,EAE1CF,EAAAA,EAAAA,KAAC4E,EAAAA,GAAOxE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKwB,GAAI,IAAEiD,GAAI,EAAE3E,SAAC,uBAI1BF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAACW,EAAG,OAAQ0H,QAAS,gBAAgBtI,UACxCF,EAAAA,EAAAA,KAAC+H,EAAAA,SAAQ,CAACC,UAAUhI,EAAAA,EAAAA,KAACyE,EAAAA,EAAO,CAACC,KAAK,OAAQxE,UACxCF,EAAAA,EAAAA,KAACyF,EAAgB,CACfU,UAAWD,EACXuC,KAAM,sBACNnI,QAAS,WACPoI,OAAOC,SAASC,QAAQ,GAADrI,OAAIyC,EAAAA,GAAQ,gBACrC,EAEA6F,KAAM,CAAE/H,EAAG,eA8CjBqD,EAAAA,EAAAA,MAAChE,EAAAA,EAAI,CAAC2I,MAAO,SAAUhI,EAAG,OAAQ0H,QAAS,gBAAgBtI,SAAA,EACzDF,EAAAA,EAAAA,KAAC+I,EAAAA,EAAO,CAACjI,EAAG,MAAOkI,MAAO,aAC1BhJ,EAAAA,EAAAA,KAAC8E,EAAAA,EAAI,CAACkE,MAAO,UAAWC,SAAU,CAAEC,KAAM,OAAQC,GAAI,QAASjJ,SAAC,QAGhEF,EAAAA,EAAAA,KAAC+I,EAAAA,EAAO,CAACjI,EAAG,MAAOkI,MAAO,gBAE5B7E,EAAAA,EAAAA,MAAC4D,EAAAA,SAAQ,CAACC,UAAUhI,EAAAA,EAAAA,KAACyE,EAAAA,EAAO,CAACC,KAAK,OAAQxE,SAAA,EACxCF,EAAAA,EAAAA,KAAC2F,EAAe,CAAC8C,KAAM,QAASW,KAAM,QAASC,YAAa,oBAE5DrJ,EAAAA,EAAAA,KAAC2F,EAAe,CAAC8C,KAAM,WAAYW,KAAM,WAAYC,YAAa,gBAGnE5C,IACCzG,EAAAA,EAAAA,KAAC8E,EAAAA,GAAI1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKyB,GAAI,IAAEmH,MAAO,MAAM9I,SAC1BuG,MAGLzG,EAAAA,EAAAA,KAACsJ,EAAAA,GAAIlJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACHE,QAAS,kBAAMhB,EAAS,GAADiB,OAAIC,EAAAA,GAAa,mBAAkB,GACtDqB,GAAI,IACR0H,GAAI,EACJvE,eAAgB,YAChBlE,EAAG,MAAMZ,SACV,sBAGDF,EAAAA,EAAAA,KAAC+H,EAAAA,SAAQ,CAACC,UAAUhI,EAAAA,EAAAA,KAACyE,EAAAA,EAAO,CAACC,KAAK,OAAQxE,UACxCF,EAAAA,EAAAA,KAAC0F,EAAsB,CAACS,UAAWA,EAAWsC,KAAM,aAGtDtE,EAAAA,EAAAA,MAACW,EAAAA,GAAI1E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKyB,GAAI,IAAE2H,GAAI,OAAOtJ,SAAA,CAAC,mCAE1BiE,EAAAA,EAAAA,MAACmF,EAAAA,EAAI,CACHhJ,QAAS,WACPhB,EAAS,GAADiB,OAAIC,EAAAA,GAAa,aAC3B,EACAwE,eAAgB,YAAY9E,SAAA,CAE3B,IAAI,6BAIF,cAQzB,EAIO,IAAML,EAAY,WACvB,MAAO,CACL0B,KAAM,CACJR,EAAG,QACH+H,MAAO,SACPN,QAAS,SACThE,GAAI,SAENhD,QAAS,CACPiI,QAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAC1CjF,GAAI,QACJyE,SAAU,GACVlI,EAAG,OACHD,EAAG,QAELW,SAAU,CAGRwH,SAAU,GAEVlI,EAAG,OACHD,EAAG,CAAC,OAAQ,OAAQ,MAAO,MAAO,OAClC4I,SAAU,UAEZC,YAAa,CACXV,SAAU,GACVlI,EAAG,QACHD,EAAG,CAAC,OAAQ,OAAQ,MAAO,MAAO,OAClC0H,QAAS,UAEX9G,QAAS,CACPX,EAAG,OACHD,EAAG,QAELa,YAAa,CACX6C,GAAI,QACJ1D,EAAG,OACHgI,MAAO,aACPU,GAAI,CACFN,KAAM,MACNC,GAAI,QAENS,GAAI,CACFV,KAAM,QAERW,YAAa,UAEfC,eAAgB,CACdtF,GAAI,QACJ1D,EAAG,CAAC,OAAQ,OAAQ,OAAQ,MAAO,OACnCgI,MAAO,aACPU,GAAI,CACFN,KAAM,MACNC,GAAI,QAENS,GAAI,CACFV,KAAM,QAGRW,YAAa,UAEfjI,KAAM,CACJqH,SAAU,CACRC,KAAM,OACNC,GAAI,QAENK,GAAI,QAEN3H,KAAM,CACJgD,GAAI,MACJoE,SAAU,CACRC,KAAM,OACNC,GAAI,QAENrI,EAAG,CACDoI,KAAM,OACNC,GAAI,QAGRY,UAAW,CACTP,GAAI,OACJP,SAAU,CACRC,KAAM,OACNC,GAAI,SAGRa,aAAc,CACZT,GAAI,QAENU,cAAe,CACbnJ,EAAG,CACDoI,KAAM,OACNC,GAAI,QAEN3E,GAAI,OACJwE,MAAO,OACPkB,YAAa,QACbC,YAAa,MACbrB,MAAO,UAGb,C","sources":["components/TopIconBar/index.tsx","pages/AuthenticationModule/EmailVerification/EmailVerification.tsx","pages/AuthenticationModule/Login/Login.tsx"],"sourcesContent":["// @flow\nimport React, { lazy, FC, memo } from \"react\";\nimport { Flex, Image } from \"@chakra-ui/react\";\nimport iconsImages from \"../../constants/icons-images\";\nimport { useNavigate } from \"react-router-dom\";\nimport Container from \"../Container\";\nimport { useSelector } from \"react-redux\";\nimport { AuthReducerProps } from \"../../interfaces\";\nimport { RootState } from \"../../redux/store\";\nimport { GLOBAL_PREFIX } from \"../../constants\";\n\ninterface TopIconBarProps {\n  pos?: any;\n}\n\nconst TopIconBar: FC<TopIconBarProps> = ({ pos }): JSX.Element => {\n  let navigate = useNavigate();\n\n  const { token }: AuthReducerProps = useSelector(\n    (state: RootState) => state.authReducer\n  );\n\n  const { styles, img } = useStyles();\n  return (\n    <Container>\n      <Flex\n        as={\"button\"}\n        onClick={() => {\n          token\n            ? navigate(`${GLOBAL_PREFIX}/dashboard`)\n            : navigate(`${GLOBAL_PREFIX}/`);\n        }}\n        position={pos || \"absolute\"}\n        {...styles}\n      >\n        <Image\n          // as=\"button\"\n          data-testid={\"logo-1\"}\n          src={iconsImages.appLogo}\n          {...img}\n        />\n      </Flex>\n    </Container>\n  );\n};\n\nexport default memo(TopIconBar);\n\nconst useStyles = () => {\n  return {\n    styles: {\n      w: \"100%\",\n      h: \"50px\",\n      justifyContent: \"flex-start\",\n    },\n    img: {\n      mt: 5,\n      // w: \"80px\",\n      h: \"50px\",\n    },\n  };\n};\n","// @flow\nimport {\n  Center,\n  Flex,\n  Heading,\n  Image,\n  Spinner,\n  Text,\n  useToast,\n  VStack,\n} from \"@chakra-ui/react\";\nimport Images_Icons from \"../../../constants/icons-images\";\nimport { useEffect } from \"react\";\nimport TopIconBar from \"../../../components/TopIconBar\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { useStyles } from \"../Login/Login\";\n// @ts-ignore\nimport OtpTimer from \"otp-timer\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { AuthReducerProps } from \"../../../interfaces\";\nimport { RootState } from \"../../../redux/store\";\nimport {\n  resetErrorMsg,\n  resetRegisterResponse,\n  verifyEmailFn,\n} from \"../../../redux/AuthSlice\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../../../config\";\nimport { GLOBAL_PREFIX } from \"../../../constants\";\n\nexport const EmailVerification = () => {\n  let navigate = useNavigate();\n  const dispatch = useDispatch<Dispatch>();\n  const toast = useToast();\n\n  const { state }: { state: any } = useLocation();\n\n  const { root, boxLeft, boxLogin, leftImg, loginColumn, head, desc } =\n    useStyles();\n  const {\n    token,\n    registerResponse,\n    verificationError,\n    verificationErrorMsg,\n    verificationLoading,\n    verificationResponse,\n  }: AuthReducerProps = useSelector((state: RootState) => state.authReducer);\n\n  useEffect(() => {\n    // dispatch(resetErrorMsg())\n    if (!state) {\n      if (verificationError) {\n        const id = \"error-toast\";\n        if (!toast.isActive(id)) {\n          toast({\n            id,\n            position: \"top\",\n            title: `${verificationErrorMsg}`,\n            description:\n              \"Please click on resend to get a valid verification link.\",\n            status: \"error\",\n            duration: 9000,\n            isClosable: false,\n          });\n          dispatch(resetErrorMsg());\n        }\n      }\n      dispatch(resetErrorMsg());\n    }\n  }, []);\n\n  useEffect(() => {\n    // GET TOKEN FROM THE URL AND TRY VERIFY\n\n    const verifyEmail = async () => {\n      dispatch(resetErrorMsg());\n      if (\n        window.location.href.substring(window.location.href.indexOf(\"=\") + 1)\n          .length < 7\n      ) {\n        // const { payload } = await dispatch(\n        //   verifyEmailFn({\n        //     verification_token: window.location.href.substring(\n        //       window.location.href.indexOf(\"=\") + 1\n        //     ),\n        //   })\n        // );\n        // console.log(payload);\n        // if (payload) {\n        //   const id = \"success-toast\";\n        //   if (!toast.isActive(id)) {\n        //     toast({\n        //       id,\n        //       position: \"top\",\n        //       title: `Email verification successful`,\n        //       description: \"Please proceed to login\",\n        //       status: \"success\",\n        //       duration: 9000,\n        //       isClosable: false,\n        //     });\n        //   }\n        //   dispatch(resetRegisterResponse());\n        //   navigate(`${GLOBAL_PREFIX}/login`);\n        //   // if (token) {\n        //   //\n        //   // } else {\n        //   //     navigate(`/phone_auth`);\n        //   // }\n        // }\n      }\n    };\n    // verifyEmail();\n  }, []);\n\n  async function SendVerificationMail() {\n    try {\n      const { data }: any = await axios.post(`${BASE_URL}/users/email`, {\n        email: registerResponse.email,\n        userId: registerResponse.userId,\n      });\n\n      console.log(data, \"ResntLink\");\n\n      if (data) {\n        toast({\n          position: \"top\",\n          title: `Verification link sent`,\n          description: \"Please check your email for the verification link.\",\n          status: \"success\",\n          duration: 4000,\n          isClosable: true,\n        });\n      }\n    } catch (e) {\n      console.log(e, \"SendVerificationMailErr\");\n    }\n  }\n\n  return (\n    <>\n      <TopIconBar />\n      <Flex {...root}>\n        <Flex {...boxLeft}>\n          <Image src={Images_Icons.AuthImage} alt=\"Me Protocol\" {...leftImg} />\n        </Flex>\n        <Flex {...boxLogin}>\n          {verificationLoading && (\n            <Center\n              pos={\"absolute\"}\n              w={\"60%\"}\n              h={\"100%\"}\n              bg={\"rgba(153,153,153,0.37)\"}\n            >\n              <Spinner size={\"xl\"} />\n            </Center>\n          )}\n          <VStack {...loginColumn}>\n            <Heading {...head} pb={2}>\n              Verify your email address\n            </Heading>\n            <Text {...desc}>\n              An email containing the verification link has been sent to your\n              email, please go to your email and click on the link to verify\n              your account.\n            </Text>\n            <Text flexDir={\"row\"} {...desc} textDecoration={\"underline\"}>\n              Link didn't arrive? Resend in{\" \"}\n              <OtpTimer\n                minutes={1}\n                seconds={1}\n                text=\" \"\n                ButtonText=\"Resend\"\n                resend={SendVerificationMail}\n                background={\"black\"}\n              />\n            </Text>\n\n            {/*<MeProtocolButton isDisabled={true} name={\"Resend\"}/>*/}\n          </VStack>\n        </Flex>\n      </Flex>\n    </>\n  );\n};\n\nexport default EmailVerification;\n","// @flow\nimport { Divider, Flex, Heading, Link, Spinner, Text, VStack } from \"@chakra-ui/react\";\nimport { lazy, Suspense, useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { Formik, FormikHelpers, FormikValues } from \"formik\";\nimport { AuthReducerProps, LoginFormikValues, UserReducerProps } from \"../../../interfaces\";\nimport { GLOBAL_PREFIX, LoginValidationSchema } from \"../../../constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { loginFn, resetErrorMsg } from \"../../../redux/AuthSlice\";\nimport { RootState } from \"../../../redux/store\";\nimport { useOnline } from \"rooks\";\nimport { BASE_URL } from \"../../../config\";\nimport Container from \"../../../components/Container\";\nimport { getUserInfo } from \"../../../redux/UserSlice\";\nconst TopIconBar = lazy(() => import(\"../../../components/TopIconBar\"));\nconst MeProtocolButton = lazy(() => import(\"../../../components/MeProtocolButton\"));\nconst MeProtocolFormikButton = lazy(() => import(\"../../../components/MeProtocolFormikButton\"));\nconst MeProtocolInput = lazy(() => import(\"../../../components/MeProtocolInput\"));\n\nexport const Login = () => {\n  let location = useLocation();\n  let navigate = useNavigate();\n  const online = useOnline();\n  const dispatch = useDispatch<Dispatch>();\n  const [googleLoading, setGoogleLoading] = useState<boolean>(false);\n  const { isLoading, error, token }: AuthReducerProps = useSelector(\n    (state: RootState) => state.authReducer\n  );\n  const { user_data }: UserReducerProps = useSelector((state: RootState) => state.userReducer);\n  const [errorMsg, setErrorMsg] = useState<string>(\" \");\n\n  const { root, boxLeft, boxLogin, leftImg, loginColumn, head, desc } = useStyles();\n  // useEffect(() => {\n  //   if (!token) {\n  //     navigate(`${GLOBAL_PREFIX}/login`);\n  //   }\n  // });\n\n  useEffect(() => {\n    dispatch(resetErrorMsg());\n    // console.log(location, \"LOCAAA\");\n\n    if (token) {\n      dispatch(resetErrorMsg());\n      navigate(`${GLOBAL_PREFIX}/dashboard`);\n    }\n  }, [dispatch, token, navigate]);\n\n  const onSubmit = async (\n    { email, password }: FormikValues,\n    actions: FormikHelpers<LoginFormikValues>\n  ) => {\n    if (!online) return;\n    // const data: any = await dispatch(loginFn({email, password}));\n    // console.log(data, \"TESRRRSE\")\n    // return\n    const { payload, error }: any = await dispatch(loginFn({ identifier: email, password }));\n    if (error) {\n      return setErrorMsg(error?.message);\n    }\n\n    if (payload) {\n      const { payload: userPayload }: any = await dispatch(getUserInfo({ token: payload }));\n\n      if (userPayload?.customer?.walletAddress) {\n        navigate(`${GLOBAL_PREFIX}/dashboard`);\n      } else {\n        navigate(`${GLOBAL_PREFIX}/syncRewards`);\n      }\n    }\n    // if (payload) {\n    //   // IF PHONE IS NOT ADDED GO TO PHONE VERIFICATION PAGE\n    //   if (payload?.access_token?.phones?.length < 1) {\n    //     navigate(`${GLOBAL_PREFIX}/phone_auth`, {\n    //       state: payload?.access_token,\n    //     });\n    //     return;\n    //   }\n    //   // IF PHONE NUMBER IS ADDED BUT 2FA IS ENABLED GO TO PHONE CODE VERIFICATION PAGE\n    //   if (payload?.access_token?.phones?.length > 0) {\n    //     const { status }: { status: number } = await axios.get(\n    //       `${BASE_URL}/users/phone/${payload?.access_token?.phones[0].phone}/${payload?.access_token?.user?.userId}`\n    //     );\n    //     if (status === 200) {\n    //       navigate(`${GLOBAL_PREFIX}/code_input`, {\n    //         state: {\n    //           state: payload?.access_token,\n    //           value: payload?.access_token?.phones[0],\n    //         },\n    //       });\n    //     }\n    //     return;\n    //   }\n    //   //IF 2FA IS DISABLED LOGIN DIRECTLY\n    //   if (payload?.access_token?.token) {\n    //     // console.log(payload, \"JJOOPOJHUHUUHU\");\n    //     // navigate(`${GLOBAL_PREFIX}/dashboard`);\n\n    //     await dispatch(getUserInfo({ token: payload?.access_token?.token }));\n    //     dispatch(GET_WALLETS({ token: payload?.access_token?.token }));\n    //     dispatch(getUserCollection({ token: payload?.access_token?.token }));\n\n    //     if (user_data?.customer?.walletAddress) {\n    //       navigate(`${GLOBAL_PREFIX}/dashboard`);\n    //     } else {\n    //       navigate(`${GLOBAL_PREFIX}/syncRewards`);\n    //     }\n    //   }\n    // }\n  };\n\n  async function SignInWithGoogle() {\n    let config = {\n      method: \"post\",\n      url: `${BASE_URL}/user/google`,\n    };\n\n    try {\n      setGoogleLoading(true);\n      // const { data }: any = await axios(config);\n      // console.log(data,\"hhhhhhhh\")\n      // if (data) {\n      //   window.location.replace(data.url);\n      window.location.replace(`${BASE_URL}/user/google`);\n      // }\n    } catch (e: any | unknown) {\n      console.log(e, \"err google\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  async function SignInWithTwitter() {\n    try {\n      window.location.replace(`${BASE_URL}/users/twitter`);\n    } catch (e: any | unknown) {\n      console.log(e, \"err twitter\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  async function SignInWithFacebook() {\n    try {\n      window.location.replace(`${BASE_URL}/users/facebook`);\n    } catch (e: any | unknown) {\n      console.log(e, \"err twitter\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Container>\n        <Suspense fallback={<Spinner size=\"sm\" />}>\n          <TopIconBar pos={\"fixed\"} />\n        </Suspense>\n        <Flex {...root}>\n          <Flex {...boxLogin}>\n            <Formik\n              initialValues={{ email: \"\", password: \"\" }}\n              validationSchema={LoginValidationSchema}\n              //@ts-ignore\n              onSubmit={onSubmit}\n            >\n              {(formik) => (\n                <VStack\n                  as={\"form\"}\n                  {...loginColumn}\n                  //@ts-ignore\n                  onSubmit={formik.handleSubmit}\n                  onChange={() => dispatch(resetErrorMsg())}\n                >\n                  <Heading {...head} pb={2}>\n                    Let’s Login\n                  </Heading>\n\n                  <Flex w={\"100%\"} justify={\"space-between\"}>\n                    <Suspense fallback={<Spinner size=\"sm\" />}>\n                      <MeProtocolButton\n                        isLoading={googleLoading}\n                        name={\"Sign in with Google\"}\n                        onClick={() => {\n                          window.location.replace(`${BASE_URL}/user/google`);\n                        }}\n                        // onClick={SignInWithGoogle}\n                        rest={{ w: \"100%\" }}\n                      />\n                    </Suspense>\n\n                    {/* <Flex w={\"25%\"} justify={\"space-between\"}>\n                      <Center\n                        as={Button}\n                        bg={\"#F6F6F6\"}\n                        h={\"40px\"}\n                        w={\"65px\"}\n                        borderRadius={\"25px\"}\n                        onClick={SignInWithFacebook}\n                        _hover={{ bg: \"black\", color: \"light\" }}\n                        role=\"group\"\n                      >\n                        <Icon\n                          color={\"#999999\"}\n                          w={\"20px\"}\n                          h={\"20px\"}\n                          as={FaFacebookSquare}\n                          _groupHover={{ color: \"light\" }}\n                        />\n                      </Center>\n\n                      <Center\n                        as={Button}\n                        bg={\"#F6F6F6\"}\n                        h={\"40px\"}\n                        w={\"65px\"}\n                        ml=\"5px\"\n                        borderRadius={\"25px\"}\n                        onClick={SignInWithTwitter}\n                        _hover={{ bg: \"black\", color: \"light\" }}\n                        role=\"group\"\n                      >\n                        <Icon\n                          color={\"#999999\"}\n                          w={\"20px\"}\n                          h={\"20px\"}\n                          as={FaTwitter}\n                          // _hover={{ color: \"light\" }}\n                          _groupHover={{ color: \"light\" }}\n                        />\n                      </Center>\n                    </Flex> */}\n                  </Flex>\n                  <Flex align={\"center\"} w={\"100%\"} justify={\"space-between\"}>\n                    <Divider w={\"45%\"} color={\"#ECECEC\"} />\n                    <Text color={\"#999999\"} fontSize={{ base: \"12px\", md: \"20px\" }}>\n                      or\n                    </Text>\n                    <Divider w={\"45%\"} color={\"#ECECEC\"} />\n                  </Flex>\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    <MeProtocolInput name={\"email\"} type={\"email\"} placeholder={\"your@email.com\"} />\n\n                    <MeProtocolInput name={\"password\"} type={\"password\"} placeholder={\"Password\"} />\n                  </Suspense>\n\n                  {errorMsg && (\n                    <Text {...desc} color={\"red\"}>\n                      {errorMsg}\n                    </Text>\n                  )}\n                  <Link\n                    onClick={() => navigate(`${GLOBAL_PREFIX}/password_reset`)}\n                    {...desc}\n                    py={3}\n                    textDecoration={\"underline\"}\n                    w={\"30%\"}\n                  >\n                    Forgot Password\n                  </Link>\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    <MeProtocolFormikButton isLoading={isLoading} name={\"Login\"} />\n                  </Suspense>\n\n                  <Text {...desc} pt={\"10px\"}>\n                    Don’t have an account yet?\n                    <Link\n                      onClick={() => {\n                        navigate(`${GLOBAL_PREFIX}/register`);\n                      }}\n                      textDecoration={\"underline\"}\n                    >\n                      {\" \"}\n                      Create one here.\n                    </Link>\n                  </Text>\n                </VStack>\n              )}\n            </Formik>\n          </Flex>\n        </Flex>\n      </Container>\n    </>\n  );\n};\n\nexport default Login;\n\nexport const useStyles = () => {\n  return {\n    root: {\n      h: \"100vh\",\n      align: \"center\",\n      justify: \"center\",\n      bg: \"light\",\n    },\n    boxLeft: {\n      display: [\"none\", \"none\", \"none\", \"flex\", \"flex\"],\n      bg: \"light\",\n      fontSize: 40,\n      h: \"100%\",\n      w: \"40vw\",\n    },\n    boxLogin: {\n      // bg: \"light\",\n      // bg: \"red\",\n      fontSize: 40,\n      // justify: \"center\",\n      h: \"100%\",\n      w: [\"100%\", \"100%\", \"80%\", \"50%\", \"50%\"],\n      overflow: \"hidden\",\n    },\n    boxRegister: {\n      fontSize: 40,\n      h: \"100vh\",\n      w: [\"100%\", \"100%\", \"80%\", \"80%\", \"70%\"],\n      justify: \"center\",\n    },\n    leftImg: {\n      h: \"100%\",\n      w: \"100%\",\n    },\n    loginColumn: {\n      bg: \"light\",\n      w: \"100%\",\n      align: \"flex-start\",\n      pt: {\n        base: \"5vh\",\n        md: \"10vh\",\n      },\n      px: {\n        base: \"15px\",\n      },\n      justifySelf: \"center\",\n    },\n    registerColumn: {\n      bg: \"light\",\n      w: [\"100%\", \"100%\", \"100%\", \"80%\", \"70%\"],\n      align: \"flex-start\",\n      pt: {\n        base: \"5vh\",\n        md: \"10vh\",\n      },\n      px: {\n        base: \"15px\",\n        // md: 20\n      },\n      justifySelf: \"center\",\n    },\n    head: {\n      fontSize: {\n        base: \"18px\",\n        md: \"25px\",\n      },\n      pt: \"20px\",\n    },\n    desc: {\n      pb: \"5px\",\n      fontSize: {\n        base: \"15px\",\n        md: \"17px\",\n      },\n      w: {\n        base: \"100%\",\n        md: \"85%\",\n      },\n    },\n    basedText: {\n      pt: \"30px\",\n      fontSize: {\n        base: \"18px\",\n        md: \"20px\",\n      },\n    },\n    checkBoxRoot: {\n      py: \"20px\",\n    },\n    countrySelect: {\n      w: {\n        base: \"100%\",\n        md: \"100%\",\n      },\n      bg: \"grey\",\n      color: \"dark\",\n      borderColor: \"light\",\n      borderWidth: \"1px\",\n      align: \"center\",\n    },\n  };\n};\n"],"names":["TopIconBar","_ref","pos","navigate","useNavigate","token","useSelector","state","authReducer","_useStyles","useStyles","styles","img","_jsx","Container","children","Flex","_objectSpread","as","onClick","concat","GLOBAL_PREFIX","position","Image","src","iconsImages","memo","w","h","justifyContent","mt","dispatch","useDispatch","toast","useToast","useLocation","root","boxLeft","boxLogin","leftImg","loginColumn","head","desc","_useSelector","registerResponse","verificationError","verificationErrorMsg","verificationLoading","verificationResponse","_SendVerificationMail","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","_yield$axios$post","data","wrap","_context2","prev","next","axios","BASE_URL","email","userId","sent","console","log","title","description","status","duration","isClosable","t0","stop","apply","arguments","useEffect","id","isActive","resetErrorMsg","_jsxs","_Fragment","Images_Icons","alt","Center","bg","Spinner","size","VStack","Heading","pb","Text","flexDir","textDecoration","OtpTimer","minutes","seconds","text","ButtonText","resend","background","lazy","MeProtocolButton","MeProtocolFormikButton","MeProtocolInput","online","useOnline","_useState","useState","_useState2","_slicedToArray","googleLoading","isLoading","error","_useState3","userReducer","user_data","_useState4","errorMsg","setErrorMsg","onSubmit","_ref2","_callee","actions","password","_yield$dispatch","payload","_userPayload$customer","_yield$dispatch2","userPayload","_context","abrupt","loginFn","identifier","message","getUserInfo","customer","walletAddress","_x","_x2","Suspense","fallback","Formik","initialValues","validationSchema","LoginValidationSchema","formik","handleSubmit","onChange","justify","name","window","location","replace","rest","align","Divider","color","fontSize","base","md","type","placeholder","Link","py","pt","display","overflow","boxRegister","px","justifySelf","registerColumn","basedText","checkBoxRoot","countrySelect","borderColor","borderWidth"],"sourceRoot":""}