{"version":3,"file":"static/js/4689.d3347938.chunk.js","mappings":"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","sources":["components/MeProtocolInput/index.tsx","pages/SyncRewards/SyncRewards.tsx"],"sourcesContent":["import { Input } from \"@chakra-ui/react\";\nimport { FormControl, FormErrorMessage } from \"@chakra-ui/form-control\";\nimport { Field, useField } from \"formik\";\nimport { memo, useEffect } from \"react\";\nimport { resetErrorMsg } from \"../../redux/AuthSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { Dispatch } from \"redux\";\n\nconst MeProtocolInput = ({ ...rest }: any): JSX.Element => {\n  const dispatch = useDispatch<Dispatch>();\n\n  const { styles } = useInputStyles();\n\n  const [field, meta] = useField(rest);\n  useEffect(() => {\n    dispatch(resetErrorMsg());\n  }, [dispatch]);\n\n  return (\n    // @ts-ignore\n    <FormControl isInvalid={meta.error && meta.touched}>\n      <Field {...styles} as={Input} {...field} {...rest} />\n      <FormErrorMessage>{meta.error}</FormErrorMessage>\n    </FormControl>\n  );\n};\n\nexport default memo(MeProtocolInput);\n\nexport const useInputStyles = () => {\n  return {\n    styles: {\n      w: \"100%\",\n      h: \"50px\",\n      py: {\n        base: 5,\n      },\n      justify: \"flex-start\",\n      align: \"center\",\n      pl: \"15px\",\n      borderRadius: 53,\n      bg: \"grey\",\n      color: \"black\",\n      fontSize: {\n        base: \"12px\",\n        md: \"16px\",\n      },\n      focusBorderColor: \"blue\",\n      _placeholder: {\n        opacity: 1,\n        color: \"placeholderColor\",\n      },\n      errorBorderColor: \"danger\",\n    },\n  };\n};\n","// @flow\nimport { lazy, Suspense, useEffect, useRef } from \"react\";\nimport {\n  Box,\n  Center,\n  Flex,\n  FormControl,\n  Heading,\n  HStack,\n  Icon,\n  Image,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  PinInput,\n  PinInputField,\n  Select,\n  SimpleGrid,\n  Skeleton,\n  Spinner,\n  Stack,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  useDisclosure,\n  useToast,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { FC, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport iconsImages from \"../../constants/icons-images\";\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverBody,\n  PopoverArrow,\n} from \"@chakra-ui/react\";\nimport { useInputStyles } from \"../../components/MeProtocolInput\";\nimport { IoIosSearch, IoIosAdd, IoMdCheckmark } from \"react-icons/io\";\nimport { nanoid } from \"nanoid\";\nimport { AuthReducerProps, UserReducerProps } from \"../../interfaces\";\nimport { RootState } from \"../../redux/store\";\nimport {\n  CategoryType,\n  useGetCategoriesQuery,\n  useGetShopsQuery,\n  useSyncBrandMutation,\n  useUpdateUserMutation,\n  useVerifySyncOtpMutation,\n} from \"../../redux/rtkQuery/api\";\nimport Container from \"../../components/Container\";\nimport Images_Icons from \"../../constants/icons-images\";\nimport MeProtocolToast from \"../../hooks/MeProtocolToast\";\nimport Lottie from \"lottie-react\";\nimport checkMark from \"../../assets/json/checkMark.json\";\nimport { getUserInfo, getUserSyncedRewards } from \"../../redux/UserSlice\";\nimport { Dispatch } from \"redux\";\nimport { GLOBAL_PREFIX } from \"../../constants\";\nimport { useMeProtocol } from \"me-protocol\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../../config\";\n\nconst MeProtocolButton = lazy(() => import(\"../../components/MeProtocolButton\"));\nconst TopIconBar = lazy(() => import(\"../../components/TopIconBar\"));\nconst ModalComponent = lazy(() => import(\"../../components/ModalComponent\"));\nconst ShopsSliderCarousel = lazy(() => import(\"../../components/ShopsSliderCarousel\"));\n\nexport const SyncRewards: FC = () => {\n  const dispatch = useDispatch<Dispatch>();\n\n  const toast = useToast();\n  const { isOpen, onClose } = useDisclosure();\n  const { isOpen: isOpen2, onOpen: onOpen2, onClose: onClose2 } = useDisclosure();\n\n  const { isOpen: isOpen3, onOpen: onOpen3, onClose: onClose3 } = useDisclosure();\n  const {\n    isOpen: isOpenSetUpWallet,\n    onOpen: onOpenSetUpWallet,\n    onClose: onCloseSetUpWallet,\n  } = useDisclosure();\n  let navigate = useNavigate();\n\n  const initialRef = useRef<any | null>(null);\n  const finalRef = useRef<any | null>(null);\n\n  const { token }: AuthReducerProps = useSelector((state: RootState) => state.authReducer);\n\n  const { setUpWallet, loading } = useMeProtocol();\n\n  const { my_rewards, my_rewards_loading }: UserReducerProps = useSelector(\n    (state: RootState) => state?.userReducer\n  );\n\n  const { data: brandsData, isLoading: trendingShopsLoading } = useGetShopsQuery(\n    { page: 1, limit: 8 },\n    { refetchOnFocus: true }\n  );\n\n  const { data: categoriesData } = useGetCategoriesQuery(\n    { page: 1, limit: 8, type: CategoryType.PRODUCT },\n    { refetchOnMountOrArgChange: 300 }\n  );\n\n  const { user_data }: UserReducerProps = useSelector((state: RootState) => state?.userReducer);\n\n  const { styles } = useInputStyles();\n  const [syncBrand] = useSyncBrandMutation();\n  const [verifySyncOtp] = useVerifySyncOtpMutation();\n  const [updateUser] = useUpdateUserMutation();\n\n  const [modalPage, setModalPage] = useState<number>(0);\n  const [brandSyncLoading, setBrandSyncLoading] = useState<boolean>(false);\n  const [brandName, setBrandName] = useState<string>(\"\");\n  const [emailCode, setEmailCode] = useState<string>(\"\");\n  const [codeErrMsg, setCodeErrMsg] = useState<string>(\"\");\n  const [emailCodeLoading, setEmailCodeLoading] = useState<boolean>(false);\n  const [verifyEmailOtpSent, setVerifyEmailOtpSent] = useState<boolean>(false);\n  const [syncEmail, setSyncEmail] = useState<string>(\"\");\n\n  const [verificationPhone, setVerificationPhone] = useState<string>(\"\");\n  const [brandUrl, setBrandUrl] = useState<string>(\"\");\n  const [brandToSync, setBrandToSync] = useState<any>({});\n  const [suggestedBrandCategory, setSuggestedBrandCategory] = useState<string>(\"\");\n  const [verificationOption, setVerificationOption] = useState<string>(\"\");\n\n  // const sliderRef = useRef<any>(null);\n  // const { data: rewards } = useGetAllRewardsQuery(undefined, {\n  //   refetchOnMountOrArgChange: true,\n  // });\n\n  const {\n    root,\n    head,\n    desc,\n    rewardBox,\n    smallerDesc,\n    connectButton,\n    search,\n    Box1,\n    center1,\n    pintf1,\n    // connectedButton,\n  } = useStyles();\n  useEffect(() => {\n    if (token) {\n      // dispatch(getUserSyncedRewards({ token }));\n    }\n  }, []);\n\n  // useEffect(() => {\n  //   console.log(brandsData);\n  // }, []);\n\n  useEffect(() => {\n    setFilteredSearch(brandsData?.data?.brands);\n    setMasterData(brandsData?.data?.brands);\n  }, [brandsData?.data?.brands]);\n\n  const [filteredSearch, setFilteredSearch] = useState<any>([]);\n  const [masterData, setMasterData] = useState<any>([]);\n  const [searchValue, setSearchValue] = useState<string>(\"\");\n\n  // SEARCH FUNCTION\n  function SearchFilter(text: string) {\n    if (text) {\n      const newData = masterData.filter((item: any) => {\n        const itemData = item.rewardName ? item.rewardName.toUpperCase() : \"\".toUpperCase();\n        const textData = text.toUpperCase();\n        return itemData.indexOf(textData) > -1;\n      });\n      setFilteredSearch(newData);\n      setSearchValue(text);\n    } else {\n      setFilteredSearch(masterData);\n      setSearchValue(text);\n    }\n  }\n\n  async function SendEmailVerificationForSync() {\n    if (!syncEmail.includes(\"@\")) return;\n    setEmailCodeLoading(true);\n\n    await verifySyncOtp({\n      rewardId: brandToSync.id,\n      emailCode,\n    })\n      .then((res: any) => {\n        if (res.error) {\n          setCodeErrMsg(res?.error?.data?.error);\n          return;\n        }\n        if (res?.data?.synced) {\n          MeProtocolToast(toast, \"Brand connected successfully\", 3000);\n          setTimeout(() => {\n            // refetchSyncRewards();\n            dispatch(getUserSyncedRewards({ token }));\n            setEmailCode(\"\");\n            setSyncEmail(\"\");\n            setVerifyEmailOtpSent(false);\n            setModalPage(2);\n          }, 300);\n        }\n      })\n      .catch((e: any | unknown) => {\n        console.log(e, \"SendEmailVerificationForSyncERR\");\n      })\n      .finally(() => {\n        setEmailCodeLoading(false);\n      });\n  }\n  async function SendEmailCodeForSync(): Promise<void> {\n    // console.log(brandToSync.id, syncEmail);\n\n    if (!syncEmail.includes(\"@\")) return;\n    setBrandSyncLoading(true);\n    // console.log(brandToSync.id, syncEmail);\n\n    await syncBrand({\n      rewardId: brandToSync.id,\n      email: syncEmail,\n    })\n      .then((res: any) => {\n        if (res?.data) {\n          setVerifyEmailOtpSent(true);\n          MeProtocolToast(toast, \"OTP sent successfully\", 3000);\n        }\n      })\n      .catch((e: any | unknown) => {\n        console.log(e, \"ERR\");\n      })\n      .finally(() => {\n        setBrandSyncLoading(false);\n      });\n  }\n\n  const ModalCases = () => {\n    switch (modalPage) {\n      case 0:\n        return (\n          <Stack>\n            <Flex flexDir={\"row\"} justify=\"space-between\">\n              <Heading {...head}>Sync {brandToSync?.name} Rewards</Heading>\n              <Center as=\"button\" onClick={onClose3}>\n                <Image w=\"30px\" h=\"30px\" src={Images_Icons.cancel_icon} />\n              </Center>\n            </Flex>\n            <Flex flexDir={\"row\"} align={\"center\"} justify={\"space-between\"} py={\"2%\"}>\n              <Center w=\"100px\" h=\"100px\" overflow={\"hidden\"}>\n                <Image borderRadius={\"10px\"} objectFit=\"contain\" src={brandToSync?.rewardImage} />\n                <Box {...Box1} pos=\"absolute\" />\n              </Center>\n\n              {/* <Avatar size={\"xl\"} /> */}\n              <Text {...desc} noOfLines={4} w=\"100%\" pl=\"3%\">\n                {brandToSync?.description}\n              </Text>\n            </Flex>\n            <Heading {...head}>What you’ll get</Heading>\n            <Flex flexDir={\"column\"} bg={\"#f6f6f6\"} p={\"5%\"} borderRadius={\"15px\"}>\n              {[\n                `Authorize Me app to access your reward balance with ${brandToSync?.brandName}`,\n                `Me app will Read reward balance from ${brandToSync?.brandName}`,\n                `Me app will monitor changes in reward balance `,\n              ]?.map((e: any) => (\n                <Flex key={nanoid()}>\n                  <Center {...center1}>\n                    <Icon as={IoMdCheckmark} color={\"light\"} />\n                  </Center>\n                  <Text {...desc} noOfLines={2} pl={\"2%\"} w={\"100%\"}>\n                    {e}\n                  </Text>\n                </Flex>\n              ))}\n            </Flex>\n            <MeProtocolButton\n              isLoading={brandSyncLoading}\n              onClick={() => setModalPage(1)}\n              // onClick={() => SyncMyReward(brandToSync)}\n              name={`Connect with ${brandToSync?.rewardName || \"reward\"}`}\n            />\n          </Stack>\n        );\n      case 1:\n        return (\n          <Stack>\n            <Flex flexDir={\"row\"} justify=\"space-between\">\n              <Heading {...head}>Verify identity </Heading>\n              <Center\n                as=\"button\"\n                onClick={() => {\n                  setModalPage(0);\n                  onClose3();\n                  setVerificationOption(\"\");\n                  setVerifyEmailOtpSent(false);\n                  setCodeErrMsg(\"\");\n                }}\n              >\n                <Image src={Images_Icons.cancel_icon} w=\"30px\" h=\"30px\" />\n              </Center>\n            </Flex>\n            <Text {...desc} w=\"100%\" pt=\"1%\">\n              Please select your preferred means of identification from the available options below\n            </Text>\n            <Flex {...search}>\n              <FormControl my=\"5px\">\n                <Select\n                  color={\"dark\"}\n                  onChange={({ target }: { target: { value: string } }) => {\n                    setVerificationOption(target.value);\n                  }}\n                  value={verificationOption}\n                  variant=\"unstyled\"\n                  placeholder=\"Select verification option\"\n                  size={\"md\"}\n                  _placeholder={{ color: \"#999999\" }}\n                >\n                  {[\"Email\", \"Phone number\"]?.map((e) => (\n                    <option key={nanoid()} value={e}>\n                      {e}\n                    </option>\n                  ))}\n                </Select>\n              </FormControl>\n            </Flex>\n            {verificationOption && (\n              <Stack>\n                {verificationOption === \"Email\" ? (\n                  <Input\n                    {...search}\n                    value={syncEmail}\n                    onChange={(e: any) => {\n                      setSyncEmail(e.target.value);\n                    }}\n                    placeholder=\"Enter email address\"\n                  />\n                ) : (\n                  <Input\n                    {...search}\n                    value={verificationPhone}\n                    onChange={(e: any) => {\n                      setVerificationPhone(e.target.value);\n                    }}\n                    placeholder=\"Enter phone number\"\n                  />\n                )}\n              </Stack>\n            )}\n            {verifyEmailOtpSent && (\n              <Box my={\"3%\"}>\n                <Text fontSize={\"10px\"}>Please provide the OTP sent to your inbox</Text>\n                <HStack w={\"100%\"} h={\"60px\"}>\n                  <PinInput\n                    onComplete={(value: string) => {\n                      setEmailCode(value);\n                      setCodeErrMsg(\"\");\n                    }}\n                    otp\n                    placeholder={\"*\"}\n                  >\n                    {[1, 2, 3, 4, 5, 6]?.map(() => (\n                      <PinInputField key={nanoid()} {...pintf1} />\n                    ))}\n                  </PinInput>\n                </HStack>\n              </Box>\n            )}\n            {codeErrMsg && (\n              <Text {...desc} color={\"red\"}>\n                {codeErrMsg}\n              </Text>\n            )}\n            <MeProtocolButton\n              isLoading={emailCodeLoading || brandSyncLoading}\n              onClick={() => {\n                // console.log(brandToSync.id, syncEmail);\n\n                if (verifyEmailOtpSent) {\n                  SendEmailVerificationForSync();\n                  return;\n                }\n                SendEmailCodeForSync();\n              }}\n              isDisabled={!syncEmail.includes(\"@\")}\n              name={\"Continue\"}\n            />\n          </Stack>\n        );\n      case 2:\n        return (\n          <Stack w=\"100%\">\n            <VStack>\n              <Lottie\n                style={{ width: \"150px\", height: \"150px\" }}\n                animationData={checkMark}\n                loop={false}\n                autoplay\n              />\n              <Heading fontSize={\"18px\"} pb=\"10px\">\n                Brand connected successfully\n              </Heading>\n              <MeProtocolButton\n                name=\"Ok\"\n                onClick={() => {\n                  // GET_ALL_SYNCED_REWARDS();\n                  // refetchSyncRewards();\n                  setModalPage(0);\n                  onClose3();\n                  setVerificationOption(\"\");\n                  setVerifyEmailOtpSent(false);\n                  setCodeErrMsg(\"\");\n                  setTimeout(() => {\n                    window.scrollTo({ top: 0, behavior: \"smooth\" });\n                  }, 100);\n                }}\n              />\n            </VStack>\n          </Stack>\n        );\n    }\n  };\n\n  // console.log(filteredSearch);\n\n  const tabs = [\n    { id: \"1\", name: \"All\" },\n    { id: \"2\", name: \"Fashion\" },\n    { id: \"3\", name: \"Beauty\" },\n    { id: \"4\", name: \"Home\" },\n    { id: \"5\", name: \"Travel\" },\n    { id: \"6\", name: \"Sports & outdoor\" },\n    { id: \"7\", name: \"Health & nutrition\" },\n    { id: \"8\", name: \"Family & baby\" },\n  ];\n\n  const CREATE_WALLET = async () => {\n    try {\n      const wallet: any = await setUpWallet({\n        persistLogin: true,\n      });\n\n      // await updateUser({\n      //   walletAddress: wallet.publicAddress,\n      // })\n      if (wallet.publicAddress) {\n        await axios\n          .put(\n            `${BASE_URL}/customer/setup-wallet-address`,\n            { walletAddress: wallet.publicAddress },\n            { headers: { Authorization: `Bearer ${token}` } }\n          )\n          .then(({ data }: any) => {\n            if (token) dispatch(getUserInfo({ token }));\n            MeProtocolToast(toast, \"Profile updated successfully\", 2000);\n          })\n          .catch((e: any | unknown) => {\n            console.log(e, \"UPDATeYUSERZRR\");\n          });\n      }\n    } catch (error) {\n      console.log(error, \"CREATE_WALLET ERR\");\n    }\n  };\n\n  return (\n    <>\n      <Suspense fallback={<Spinner size=\"sm\" />}>\n        <Suspense fallback={<Spinner size=\"sm\" />}>\n          <TopIconBar pos={\"relative\"} />\n        </Suspense>\n        {/* <Flex justifyContent={\"center\"}> */}\n        <Container>\n          <Stack {...root} w={\"100%\"}>\n            {/*SYNC REWARDS HEADING AND DESC*/}\n            <Heading {...head}>Sync rewards from the brands you love</Heading>\n            <Text {...desc}>\n              Connect your favorite brands to import rewards and get exclusive deals.\n            </Text>\n            <Heading {...desc} pt={\"30px\"}>\n              Connected brands\n            </Heading>\n            {/*------------------------------------------SYNC REWARDS BOX------------------------------------------*/}\n            <Center as={VStack} {...rewardBox}>\n              <Flex w={{ base: \"90%\", md: \"65%\" }} flexDir={\"column\"} align={\"center\"}>\n                <Text {...desc} w={\"40%\"} textAlign={\"center\"}>\n                  {my_rewards?.length <= 0\n                    ? \"You haven’t connected any brand, yet. Add the brands below\"\n                    : \"Add more brands below \"}\n                  {/*<Text as={\"button\"} textDecoration={\"underline\"} onClick={onOpen}>*/}\n                  {/*    import from your wallet.*/}\n                  {/*</Text>*/}\n                </Text>\n                {!user_data?.customer?.walletAddress && (\n                  <Text {...desc} w={\"40%\"} textAlign={\"center\"}>\n                    or\n                  </Text>\n                )}\n\n                {/*---------------------------------------------CUSTOM CONNECT WALLET BUTTON-----------------------------------*/}\n                {/* //================CONNECT WALLET BUTTON WAS HERE */}\n                {!user_data?.customer?.walletAddress && (\n                  // user_data?.customer?.walletAddress\n                  <>\n                    {loading ? (\n                      <Spinner size={\"sm\"} />\n                    ) : (\n                      <Text\n                        textDecoration={\"underline\"}\n                        fontSize={\"14px\"}\n                        mb=\"10px\"\n                        as=\"button\"\n                        onClick={CREATE_WALLET}\n                      >\n                        Set up your wallet\n                      </Text>\n                    )}{\" \"}\n                  </>\n                )}\n                <Popover placement=\"right-end\">\n                  <PopoverTrigger>\n                    <Box as={\"button\"}>\n                      <Image\n                        src={iconsImages.noticeIcon}\n                        w={{ base: 5, md: 5 }}\n                        h={{ base: 5, md: 5 }}\n                      />\n                    </Box>\n                  </PopoverTrigger>\n                  <PopoverContent borderRadius={20} borderColor={\"grey\"}>\n                    <PopoverArrow />\n                    <PopoverBody>\n                      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla mattis, est eu\n                      tempor accumsan, lorem nulla auctor ex, a consectetur nisi mi nec justo. Cras\n                      eu nunc et dui suscipit venenatis.\n                    </PopoverBody>\n                  </PopoverContent>\n                </Popover>\n              </Flex>\n              <Suspense fallback={<Spinner size=\"sm\" />}>\n                <MeProtocolButton\n                  isDisabled={!user_data?.customer?.walletAddress}\n                  rest={{ w: { base: \"90%\", md: \"50%\" } }}\n                  name={\"Next\"}\n                  onClick={() => navigate(`${GLOBAL_PREFIX}/dashboard`)}\n                />\n              </Suspense>\n\n              <Flex\n                w={{ base: \"90%\", md: \"50%\" }}\n                justifyContent={\"center\"}\n                onClick={() => navigate(`${GLOBAL_PREFIX}/dashboard`)}\n                color={\"placeholderColor\"}\n                _hover={{ color: \"dark\" }}\n              >\n                <Text\n                  as={\"button\"}\n                  fontSize={{\n                    base: \"14px\",\n                    md: \"16px\",\n                  }}\n                >\n                  Do it later\n                </Text>\n              </Flex>\n            </Center>\n\n            {/*FEATURED SECTION*/}\n            {/* <Flex w={\"100%\"} pt={\"2vh\"} justify={\"space-between\"}>\n            <Heading {...desc}>Featured</Heading>\n            <Flex\n              display={{ base: \"none\", md: \"flex\" }}\n              justify={\"space-between\"}\n              w={\"5%\"}\n            >\n              {[\n                { icon: ImCircleLeft, fn: ArrowLeft },\n                { icon: ImCircleRight, fn: ArrowRight },\n              ]?.map((e, i) => (\n                <Box onClick={e.fn} key={nanoid()}>\n                  <Icon\n                    onClick={() => setActiveArrow(i)}\n                    as={e.icon}\n                    w={5}\n                    h={5}\n                    color={i === activeArrow ? \"dark\" : \"grey\"}\n                  />\n                </Box>\n              ))}\n            </Flex>\n          </Flex> */}\n            <Suspense fallback={<Spinner size=\"sm\" />}>\n              <></>\n              <ShopsSliderCarousel\n                key={nanoid()}\n                shopArray={brandsData?.data?.brands}\n                plusButtonVisible\n                preLink={`${GLOBAL_PREFIX}/dashboard/shop/`}\n              />\n            </Suspense>\n\n            {/* <Box h={\"12vw\"} w={\"100%\"}>\n            <Slider ref={sliderRef} {...settings}>\n              {brandsDummy.slice(3, 9)?.map((e) => (\n                <Box pr={\"20px\"} key={nanoid()}>\n                  <Box\n                    w={\"20vw\"}\n                    h={\"20vh\"}\n                    bg={\"grey\"}\n                    borderRadius={\"16px\"}\n                    objectFit={\"cover\"}\n                    background={`url(${e?.images}) center/cover no-repeat`}\n                  />\n                </Box>\n              ))}\n            </Slider>\n          </Box> */}\n            <Flex w={\"100%\"} pt={\"3%\"} justify={\"space-between\"} align={\"center\"}>\n              <Heading {...desc}>Search for all brands</Heading>\n              <Suspense fallback={<Spinner size=\"sm\" />}>\n                <MeProtocolButton\n                  name={\"Suggest Brand\"}\n                  rest={{\n                    w: {\n                      base: \"35%\",\n                      md: \"20%\",\n                    },\n                    color: \"dark\",\n                    borderWidth: 1,\n                    backgroundColor: \"light\",\n                  }}\n                  onClick={onOpen2}\n                />\n              </Suspense>\n            </Flex>\n\n            {/*-------------------------------------------------SEARCH SECTION--------------------------------------------------------*/}\n            <Flex pt=\"20px\">\n              <Flex {...styles}>\n                <InputGroup _focus={{ boxShadow: \"none\" }} as=\"button\">\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    children={\n                      <Icon as={IoIosSearch} color={\"placeholderColor\"} w={\"25px\"} h={\"25px\"} />\n                    }\n                  />\n                  <Input\n                    borderWidth=\"0px\"\n                    placeholder={\"Search offers, brands or styles...\"}\n                    value={searchValue}\n                    onChange={({ target }: { target: { value: string } }) => {\n                      SearchFilter(target.value);\n                    }}\n                  />\n                </InputGroup>\n              </Flex>\n            </Flex>\n\n            {/*----------------------------TABS INDICATOR----------------------------*/}\n\n            <Tabs isLazy isManual w={\"100%\"} pt=\"50px\" pb={\"10px\"}>\n              <TabList>\n                {tabs?.map((e) => (\n                  <Tab\n                    {...smallerDesc}\n                    w={\"100%\"}\n                    key={nanoid()}\n                    _selected={{ color: \"black\", borderColor: \"black\" }}\n                    color=\"#999999\"\n                  >\n                    <Text noOfLines={1}>{e.name}</Text>\n                  </Tab>\n                ))}\n              </TabList>\n              <TabPanels>\n                <TabPanel p={\"0px\"}></TabPanel>\n              </TabPanels>\n            </Tabs>\n            {/*----------------------------ALL BRANDS SECTION----------------------------*/}\n            <Flex alignSelf={\"center\"}>\n              <SimpleGrid\n                columns={3}\n                w={\"100%\"}\n                spacingX={[\"30px\", \"30px\", \"30px\", \"30px\", \"30px\"]}\n                spacingY=\"40px\"\n              >\n                {filteredSearch?.map((e: any) => (\n                  <Box key={nanoid()} role=\"group\">\n                    <Skeleton\n                      isLoaded={true}\n                      // isLoaded={!trendingBrandsLoading}\n                      mr={\"20px\"}\n                      overflow={\"hidden\"}\n                      w={[\"120px\", \"200px\", \"280px\", \"320px\", \"400px\"]}\n                      h={[\"100px\", \"180px\", \"180px\", \"180px\", \"200px\"]}\n                      onClick={() => {\n                        onOpen3();\n                        setBrandToSync({ ...e });\n                      }}\n                      // onClick={() => handleClick(e)}\n                    >\n                      <Center\n                        w={[\"120px\", \"200px\", \"280px\", \"320px\", \"400px\"]}\n                        h={[\"100px\", \"180px\", \"180px\", \"180px\", \"200px\"]}\n                        bg={\"#0000003D\"}\n                        borderRadius={{ base: \"10px\", md: \"16px\" }}\n                        pos=\"absolute\"\n                        background={`url(${\n                          e?.banners ? e?.banners[1] : \"\"\n                        }) center/cover no-repeat`}\n                        backgroundColor=\"rgba(0, 0, 0, 0.5)\"\n                        backgroundBlendMode=\"multiply\"\n                        as=\"button\"\n                        overflow={\"hidden\"}\n                      >\n                        {e?.white_logo && (\n                          <Image\n                            w={\"130px\"}\n                            h={\"130px\"}\n                            position=\"relative\"\n                            borderRadius={\"5px\"}\n                            src={e?.white_logo}\n                            objectFit={\"contain\"}\n                            fallbackSrc={Images_Icons.appLogoPlaceholder}\n                            fallbackStrategy={\"onError\"}\n                          />\n                        )}\n\n                        <Box display={\"none\"} _groupHover={{ display: \"flex\" }} pos=\"absolute\">\n                          <MeProtocolButton\n                            icon={<Icon as={IoIosAdd} color={\"dark\"} w={\"30px\"} h={\"30px\"} />}\n                            name={\"Connect\"}\n                            rest={connectButton}\n                          />\n                        </Box>\n                      </Center>\n                    </Skeleton>\n                    <Text\n                      w={[\"120px\", \"200px\", \"280px\", \"320px\", \"400px\"]}\n                      noOfLines={1}\n                      mt={\"12px\"}\n                      color=\"dark\"\n                      fontSize={[\"10px\", \"10px\", \"12px\", \"12px\", \"14px\"]}\n                    >\n                      {e?.brandName}\n                    </Text>\n                  </Box>\n                  // <Box\n                  //   pb={\"5px\"}\n                  //   brightness={\"100%\"}\n                  //   key={nanoid()}\n                  //   role=\"group\"\n                  // >\n                  //   {/*{e.comingSoon && (*/}\n                  //   {/*    <Image*/}\n                  //   {/*        src={iconsImages.comingSoonIcon}*/}\n                  //   {/*        w={{base: \"7%\", md: \"7%\"}}*/}\n                  //   {/*        h={{base: \"2%\", md: \"2%\"}}*/}\n                  //   {/*        position={\"absolute\"}*/}\n                  //   {/*        pt={\"10px\"}*/}\n                  //   {/*        pl={\"10px\"}*/}\n                  //   {/*        alignSelf={\"flex-start\"}*/}\n                  //   {/*    />*/}\n                  //   {/*)}*/}\n                  //   <Center\n                  //     as=\"button\"\n                  //     h={\"200px\"}\n                  //     w={\"400px\"}\n                  //     borderRadius={\"16px\"}\n                  //     overflow={\"hidden\"}\n                  //     px=\"5px\"\n                  //     onClick={() => {\n                  //       onOpen3();\n                  //       setBrandToSync({ ...e });\n                  //     }}\n                  //   >\n                  //     <Box\n                  //       h={\"200px\"}\n                  //       w={\"400px\"}\n                  //       bg=\"#99999948\"\n                  //       pos=\"absolute\"\n                  //       borderRadius={\"16px\"}\n                  //     />\n                  //     <Image\n                  //       src={e.rewardImage}\n                  //       h={\"200px\"}\n                  //       w={\"400px\"}\n                  //       // borderRadius={\"100px\"}\n                  //       p=\"50px\"\n                  //       pos={\"absolute\"}\n                  //       objectFit=\"contain\"\n                  //       fallbackSrc={Images_Icons.appLogoPlaceholder}\n                  //     />\n                  //     <Box display={\"none\"} _groupHover={{ display: \"flex\" }}>\n                  //       <MeProtocolButton\n                  //         icon={\n                  //           <Icon\n                  //             as={IoIosAdd}\n                  //             color={\"dark\"}\n                  //             w={\"30px\"}\n                  //             h={\"30px\"}\n                  //           />\n                  //         }\n                  //         name={\"Connect\"}\n                  //         rest={connectButton}\n                  //       />\n                  //     </Box>\n\n                  //     <Box\n                  //       height={\"200px\"}\n                  //       w={\"400px\"}\n                  //       borderRadius={\"16px\"}\n                  //       bg={\"rgba(0,0,0,0.04)\"}\n                  //       position={\"absolute\"}\n                  //     />\n                  //   </Center>\n                  //   <Text {...desc}>{e.rewardName || \"Reward\"}</Text>\n                  // </Box>\n                ))}\n              </SimpleGrid>\n            </Flex>\n          </Stack>\n        </Container>\n\n        {/*-------------------------------------------- SUGGEST BRANDS MODAL----------------------------------------*/}\n        <Suspense fallback={<Spinner size=\"sm\" />}>\n          <ModalComponent\n            isOpen={isOpen2}\n            onClose={onClose2}\n            initialFocusRef={initialRef}\n            finalFocusRef={finalRef}\n          >\n            <Flex flexDir={\"row\"} justify=\"space-between\">\n              <Heading {...head}>Suggest new brand</Heading>\n              <Center as=\"button\" onClick={onClose2}>\n                <Image src={Images_Icons.cancel_icon} w=\"30px\" h=\"30px\" />\n              </Center>\n            </Flex>\n            <Text {...desc} w=\"100%\" pt=\"1%\">\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla mattis, est eu tempor\n              accumsan, lorem nulla auctor ex, a consectetur nisi mi nec justo. Cras eu nunc et dui\n              suscipit venenatis. Phasellus posuere lacus commodo enim aliquam commodo. In ac\n              sodales lorem.\n            </Text>\n            <FormControl>\n              <Input\n                {...search}\n                ref={initialRef}\n                value={brandName}\n                onChange={(e: any) => {\n                  setBrandName(e.target.value);\n                }}\n                placeholder=\"Brand Name\"\n              />\n            </FormControl>\n            <FormControl my=\"5px\">\n              <Input\n                {...search}\n                value={brandUrl}\n                onChange={(e: any) => {\n                  setBrandUrl(e.target.value);\n                }}\n                placeholder=\"https://my-brand.xyz\"\n              />\n            </FormControl>\n            <Flex {...search}>\n              <Select\n                color={\"dark\"}\n                onChange={(e: any) => {\n                  setSuggestedBrandCategory(e.target.value);\n                }}\n                value={suggestedBrandCategory}\n                variant=\"unstyled\"\n                placeholder=\"Select category\"\n                size={\"md\"}\n                _placeholder={{ color: \"#999999\" }}\n              >\n                {[\"Clothings\", \"Airline\", \"Food and beverages\", \"Sport\"]?.map((e) => (\n                  <option key={nanoid()} value={e}>\n                    {e}\n                  </option>\n                ))}\n              </Select>\n            </Flex>\n            <Suspense fallback={<Spinner size=\"sm\" />}>\n              <MeProtocolButton\n                name=\"Submit brand\"\n                onClick={() => {}}\n                rest={{\n                  my: \"5px\",\n                }}\n              />\n            </Suspense>\n          </ModalComponent>\n\n          {/*-------------------------------------------- SYNC BRANDS MODAL----------------------------------------*/}\n          <ModalComponent isOpen={isOpen3} onClose={onClose3} closeOnOverlayClick={false}>\n            {ModalCases()}\n          </ModalComponent>\n\n          {/*-------------------------------------------- WALLET SETUP MODAL----------------------------------------*/}\n          {/* \n          <ModalComponent\n            isOpen={isOpenSetUpWallet}\n            onClose={onCloseSetUpWallet}\n            closeOnOverlayClick={false}\n          >\n            <Text>Set up a wallet</Text>\n          </ModalComponent> */}\n        </Suspense>\n      </Suspense>\n    </>\n  );\n};\n\nexport default SyncRewards;\n\nexport const useStyles = () => {\n  return {\n    root: {\n      w: \"100%\",\n      // px: [5, 5, 10, 20, 40],\n      pt: \"3%\",\n      overflow: \"hidden\",\n    },\n    head: {\n      fontSize: {\n        base: \"18px\",\n        md: \"20px\",\n      },\n    },\n    desc: {\n      pb: \"5px\",\n      fontSize: {\n        base: \"12px\",\n        md: \"14px\",\n      },\n      w: {\n        base: \"100%\",\n        md: \"80%\",\n      },\n    },\n    smallerDesc: {\n      fontSize: {\n        base: \"10px\",\n        md: \"14px\",\n      },\n    },\n    rewardBox: {\n      w: \"100%\",\n      bg: \"grey\",\n      // h: \"30vh\",\n      borderRadius: 10,\n      borderWidth: 1,\n      borderColor: \"placeholderColor\",\n      borderStyle: \"dashed\",\n      py: \"2%\",\n    },\n    connectButton: {\n      w: {\n        base: \"65%\",\n        md: \"90%\",\n      },\n      color: \"dark\",\n      borderWidth: 0,\n      backgroundColor: \"light\",\n      alignSelf: \"center\",\n      justifySelf: \"center\",\n    },\n    connectedButton: {\n      w: {\n        base: \"65%\",\n        md: \"35%\",\n      },\n      color: \"light\",\n      borderWidth: 1,\n      backgroundColor: \"transparent\",\n    },\n    search: {\n      w: \"100%\",\n      h: \"40px\",\n      background: \"#F6F6F6\",\n      borderRadius: \"53px\",\n      justify: \"flex-start\",\n      align: \"center\",\n      pl: \"2%\",\n      borderWidth: \"0px\",\n      _placeholder: {\n        color: \"#999999\",\n      },\n      _focus: {\n        borderColor: \"black\",\n      },\n    },\n    Box1: {\n      w: \"100px\",\n      h: \"100px\",\n      borderRadius: \"100px\",\n      bg: \"#9999992D\",\n    },\n    center1: {\n      bg: \"#000000\",\n      w: \"20px\",\n      h: \"20px\",\n      borderRadius: \"20px\",\n    },\n    pintf1: {\n      bg: \"grey\",\n      borderRadius: 10,\n      borderWidth: 0,\n      w: \"15%\",\n      h: \"100%\",\n    },\n  };\n};\n\n//  <ConnectButton.Custom>\n//    {({\n//      account,\n//      chain,\n//      openAccountModal,\n//      openChainModal,\n//      openConnectModal,\n//      authenticationStatus,\n//      mounted,\n//    }) => {\n//      // Note: If your app doesn't use authentication, you\n//      // can remove all 'authenticationStatus' checks\n//      const ready = mounted && authenticationStatus !== \"loading\";\n//      const connected =\n//        ready &&\n//        account &&\n//        chain &&\n//        (!authenticationStatus || authenticationStatus === \"authenticated\");\n\n//      return (\n//        <div\n//          {...(!ready && {\n//            \"aria-hidden\": true,\n//            style: {\n//              opacity: 0,\n//              pointerEvents: \"none\",\n//              userSelect: \"none\",\n//            },\n//          })}\n//        >\n//          {(() => {\n//            if (!connected) {\n//              return (\n//                // <button onClick={openConnectModal} type=\"button\">\n//                //     Connect Wallet\n//                // </button>\n\n//                <Text\n//                  {...desc}\n//                  w={\"100%\"}\n//                  as={\"button\"}\n//                  textDecoration={\"underline\"}\n//                  mr={\"30%\"}\n//                  onClick={openConnectModal}\n//                >\n//                  import from your wallet.\n//                </Text>\n//              );\n//            }\n\n//            if (chain.unsupported) {\n//              return (\n//                <button onClick={openChainModal} type=\"button\">\n//                  <Text textDecoration=\"underline\">Wrong network</Text>\n//                </button>\n//              );\n//            }\n\n//            return (\n//              <div style={{ display: \"flex\", gap: 12 }}>\n//                <button\n//                  onClick={openChainModal}\n//                  style={{\n//                    display: \"flex\",\n//                    alignItems: \"center\",\n//                  }}\n//                  type=\"button\"\n//                >\n//                  {chain.hasIcon && (\n//                    <div\n//                      style={{\n//                        background: chain.iconBackground,\n//                        width: 12,\n//                        height: 12,\n//                        borderRadius: 999,\n//                        overflow: \"hidden\",\n//                        marginRight: 4,\n//                      }}\n//                    >\n//                      {chain.iconUrl && (\n//                        <img\n//                          alt={chain.name ?? \"Chain icon\"}\n//                          src={chain.iconUrl}\n//                          style={{ width: 12, height: 12 }}\n//                        />\n//                      )}\n//                    </div>\n//                  )}\n//                  {chain.name}\n//                </button>\n//                {\" | \"}\n//                <button onClick={openAccountModal} type=\"button\">\n//                  {/* {account.displayBalance\n//                                 ? ` (${account.displayBalance})`\n//                                 : 0} */}\n//                  <Text textDecoration=\"underline\">Disconnect</Text>\n//                </button>\n\n//                {/* <button onClick={openAccountModal} type=\"button\">\n//                             {account.displayBalance\n//                               ? ` (${account.displayBalance})`\n//                               : \"0\"}\n//                             {account.displayName}\n//                           </button> */}\n//              </div>\n//            );\n//          })()}\n//        </div>\n//      );\n//    }}\n//  </ConnectButton.Custom>;\n"],"names":["MeProtocolInput","_ref","rest","Object","assign","_objectDestructuringEmpty","dispatch","useDispatch","styles","useInputStyles","_useField","useField","_useField2","_slicedToArray","field","meta","useEffect","resetErrorMsg","_jsxs","FormControl","isInvalid","error","touched","children","_jsx","Field","_objectSpread","as","Input","FormErrorMessage","memo","w","h","py","base","justify","align","pl","borderRadius","bg","color","fontSize","md","focusBorderColor","_placeholder","opacity","errorBorderColor","MeProtocolButton","lazy","TopIconBar","ModalComponent","ShopsSliderCarousel","_brandsData$data3","_user_data$customer","_user_data$customer2","_user_data$customer3","_brandsData$data4","_ref8","toast","useToast","_useDisclosure","useDisclosure","_useDisclosure2","isOpen","onClose","isOpen2","onOpen2","onOpen","onClose2","_useDisclosure3","isOpen3","onOpen3","onClose3","_useDisclosure4","navigate","useNavigate","initialRef","useRef","finalRef","token","useSelector","state","authReducer","_useMeProtocol","useMeProtocol","setUpWallet","loading","_useSelector2","userReducer","my_rewards","_useGetShopsQuery","my_rewards_loading","useGetShopsQuery","page","limit","refetchOnFocus","brandsData","data","user_data","isLoading","useGetCategoriesQuery","type","CategoryType","refetchOnMountOrArgChange","_useSyncBrandMutation","useSyncBrandMutation","syncBrand","_useVerifySyncOtpMuta","useVerifySyncOtpMutation","verifySyncOtp","_useUpdateUserMutatio","useUpdateUserMutation","_useState","useState","_useState2","modalPage","setModalPage","_useState3","_useState4","brandSyncLoading","setBrandSyncLoading","_useState5","_useState6","brandName","setBrandName","_useState7","_useState8","emailCode","setEmailCode","_useState9","_useState10","codeErrMsg","setCodeErrMsg","_useState11","_useState12","emailCodeLoading","setEmailCodeLoading","_useState13","_useState14","verifyEmailOtpSent","setVerifyEmailOtpSent","_useState15","_useState16","syncEmail","setSyncEmail","_useState17","_useState18","verificationPhone","setVerificationPhone","_useState19","_useState20","brandUrl","setBrandUrl","_useState21","_useState22","brandToSync","setBrandToSync","_useState23","_useState24","suggestedBrandCategory","setSuggestedBrandCategory","_useState25","_useState26","verificationOption","setVerificationOption","_useStyles","useStyles","root","head","desc","rewardBox","smallerDesc","connectButton","search","Box1","center1","pintf1","_brandsData$data","_brandsData$data2","setFilteredSearch","brands","setMasterData","_useState27","_useState28","filteredSearch","_useState29","_useState30","masterData","_useState31","_useState32","searchValue","setSearchValue","_SendEmailVerificationForSync","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","includes","abrupt","rewardId","id","then","res","_res$data","_res$error","_res$error$data","synced","MeProtocolToast","setTimeout","getUserSyncedRewards","catch","e","console","log","finally","stop","apply","arguments","_SendEmailCodeForSync","_callee3","_context3","email","tabs","name","CREATE_WALLET","_ref5","_callee","wallet","_context","persistLogin","sent","publicAddress","axios","concat","BASE_URL","walletAddress","headers","Authorization","_ref6","getUserInfo","t0","_Fragment","Suspense","fallback","Spinner","size","pos","Container","Stack","Heading","Text","pt","Center","VStack","Flex","flexDir","textAlign","length","customer","textDecoration","mb","onClick","Popover","placement","PopoverTrigger","Box","Image","src","iconsImages","PopoverContent","borderColor","PopoverArrow","PopoverBody","isDisabled","GLOBAL_PREFIX","justifyContent","_hover","shopArray","plusButtonVisible","preLink","nanoid","borderWidth","backgroundColor","InputGroup","_focus","boxShadow","InputLeftElement","pointerEvents","Icon","IoIosSearch","placeholder","value","onChange","_ref7","text","newData","filter","item","itemData","rewardName","toUpperCase","textData","indexOf","SearchFilter","target","Tabs","isLazy","isManual","pb","TabList","map","_createElement","Tab","key","_selected","noOfLines","TabPanels","TabPanel","p","alignSelf","SimpleGrid","columns","spacingX","spacingY","role","Skeleton","isLoaded","mr","overflow","background","banners","backgroundBlendMode","white_logo","position","objectFit","fallbackSrc","Images_Icons","fallbackStrategy","display","_groupHover","icon","IoIosAdd","mt","initialFocusRef","finalFocusRef","ref","my","Select","variant","closeOnOverlayClick","_ref3","_ref4","rewardImage","description","IoMdCheckmark","_ref2","HStack","PinInput","onComplete","otp","PinInputField","SendEmailVerificationForSync","SendEmailCodeForSync","Lottie","style","width","height","animationData","checkMark","loop","autoplay","window","scrollTo","top","behavior","ModalCases","borderStyle","justifySelf","connectedButton"],"sourceRoot":""}