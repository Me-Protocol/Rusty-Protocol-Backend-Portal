{"version":3,"file":"static/js/6704.acfd924d.chunk.js","mappings":"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","sources":["components/SkeletonLoader/index.tsx","pages/DashboardModule/Dashboard/Dashboard.tsx"],"sourcesContent":["import {\n  Flex,\n  Skeleton,\n  HStack,\n  Heading,\n  Box,\n  Text,\n  SimpleGrid,\n} from \"@chakra-ui/react\";\nimport { FC } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nconst SkeletonLoader: FC = (): JSX.Element => {\n  const { root } = useStyles();\n  return (\n    <SimpleGrid\n      columns={[2, 2, 3, 4, 4]}\n      w={\"100%\"}\n      spacingX={[\"35px\", \"35px\", \"35px\", \"15px\", \"35px\"]}\n      spacingY={\"5px\"}\n    >\n      {[1, 2, 3, 4]?.map(() => (\n        <Flex {...root} flexDir={\"column\"} key={nanoid()}>\n          <Box w={\"280px\"}>\n            <Skeleton\n              borderRadius={{ base: \"8px\", md: \"16px\" }}\n              isLoaded={false}\n            >\n              <Flex\n                w={\"280px\"}\n                h={\"280px\"}\n                borderRadius={{ base: \"8px\", md: \"16px\" }}\n                flexDir={\"column\"}\n                bg={\"#99999951\"}\n                overflow=\"hidden\"\n                className=\"card-hover\"\n                as=\"button\"\n              >\n                {/* OVERLAY */}\n                <Box\n                  pos={\"absolute\"}\n                  borderRadius={{ base: \"8px\", md: \"16px\" }}\n                  w={\"280px\"}\n                  h={\"280px\"}\n                  bg={\"#99999951\"}\n                />\n              </Flex>\n            </Skeleton>\n            <Flex flexDir={\"column\"} mt={\"2%\"}>\n              <Flex w={\"280px\"} justify={\"space-between\"} align={\"center\"}>\n                <Skeleton\n                  borderRadius={{ base: \"8px\", md: \"16px\" }}\n                  isLoaded={false}\n                >\n                  <Text\n                    fontSize={[\"10px\", \"10px\", \"14px\", \"16px\", \"16px\"]}\n                    noOfLines={1}\n                  >\n                    productTitle\n                  </Text>\n                </Skeleton>\n              </Flex>\n              <Skeleton\n                borderRadius={{ base: \"8px\", md: \"16px\" }}\n                isLoaded={false}\n              >\n                <Text\n                  fontSize={[\"8px\", \"8px\", \"12px\", \"14px\", \"14px\"]}\n                  opacity={0.7}\n                  noOfLines={1}\n                >\n                  points\n                </Text>\n              </Skeleton>\n\n              <Skeleton\n                borderRadius={{ base: \"8px\", md: \"16px\" }}\n                isLoaded={false}\n              >\n                <HStack>\n                  <Heading fontSize={[\"10px\", \"10px\", \"14px\", \"16px\", \"16px\"]}>\n                    points\n                  </Heading>\n                  <Text fontSize={[\"10px\", \"10px\", \"14px\", \"16px\", \"16px\"]}>\n                    price\n                  </Text>\n                </HStack>\n              </Skeleton>\n            </Flex>\n          </Box>\n        </Flex>\n      ))}\n    </SimpleGrid>\n  );\n};\n\nexport default SkeletonLoader;\n\nconst useStyles = () => {\n  return {\n    root: {\n      //   w: \"90vw\",\n      pt: \"2vh\",\n      align: \"center\",\n      pb: \"2%\",\n      borderRadius: \"16px\",\n    },\n  };\n};\n","// @flow\nimport {\n  Flex,\n  SimpleGrid,\n  Spacer,\n  Stack,\n  Text,\n  Spinner,\n  Box,\n  Center,\n  Heading,\n  HStack,\n  Image,\n} from \"@chakra-ui/react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { lazy, Suspense, useState } from \"react\";\nimport { AuthReducerProps, UserReducerProps } from \"../../../interfaces\";\nimport { RootState } from \"../../../redux/store\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  DashIcon1,\n  DashIcon3,\n  DashIcon5,\n  PopularDeaslsSvg,\n  TrendingShopsSvg,\n} from \"../../../assets/iconsSvg/iconsSvg\";\nimport { nanoid } from \"nanoid\";\nimport { Dispatch } from \"redux\";\nimport { OrderBy, Sort, useGetAllOffersQuery, useGetShopsQuery } from \"../../../redux/rtkQuery/api\";\nimport SkeletonLoader from \"../../../components/SkeletonLoader\";\nimport NewDashboardNavBar from \"../../../components/NewDashboardNavBar\";\nimport moment from \"moment\";\nimport { useDashboardStyles } from \"./styles\";\nimport { GLOBAL_PREFIX } from \"../../../constants\";\nimport Slider from \"react-slick\";\nimport Images_Icons from \"../../../constants/icons-images\";\nimport { ME_REQ_URL } from \"@me-protocol/config\";\nconst BrandsSliderCarousel = lazy(() => import(\"../../../components/BrandsSliderCarousel\"));\nconst DashboardProductItem = lazy(() => import(\"../../../components/DashboardProductItem\"));\nconst DashboardCardItem = lazy(() => import(\"../../../components/DashboardCardItem\"));\nconst DashboardShopItem = lazy(() => import(\"../../../components/DashboardShopItem\"));\nconst Footer = lazy(() => import(\"../../../components/Footer\"));\nconst Container = lazy(() => import(\"../../../components/Container\"));\n\nexport const Dashboard = () => {\n  const dispatch = useDispatch<Dispatch>();\n  let navigate = useNavigate();\n\n  // const [activeIndex, setActiveIndex] = useState<number | null>(null);\n  const [isLoaded, setIsLoaded] = useState<boolean>(true);\n\n  // const {user_data} = useSelector((state: RootState) => state?.userReducer)\n  const { root, nameStyles, button, loadMore } = useDashboardStyles();\n\n  const { token, session_id }: AuthReducerProps = useSelector(\n    (state: RootState) => state?.authReducer\n  );\n  const { user_data }: UserReducerProps = useSelector((state: RootState) => state?.userReducer);\n\n  const settings = {\n    dots: true,\n    infinite: true,\n    speed: 2000,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    vertical: false,\n    arrows: false,\n    autoplay: true,\n    swipeToSlide: true,\n    draggable: true,\n    autoplaySpeed: 5000,\n    adaptiveHeight: true,\n    centerPadding: \"10\",\n    verticalSwiping: false,\n  };\n\n  const { data: popularOffers, isLoading: popularOfferIsLoading } = useGetAllOffersQuery(\n    {\n      page: 1,\n      limit: 8,\n      orderBy: OrderBy.MOST_VIEWED,\n      sort: Sort.POPULAR,\n    },\n    { refetchOnMountOrArgChange: true }\n  );\n\n  const { data: newOffers, isLoading: newOfferIsLoading } = useGetAllOffersQuery(\n    {\n      page: 1,\n      limit: 8,\n      orderBy: OrderBy.MOST_RECENT,\n      sort: Sort.NEW,\n    },\n    { refetchOnMountOrArgChange: true }\n  );\n  const { data: expiringOffers, isLoading: expiringOfferIsLoading } = useGetAllOffersQuery(\n    {\n      page: 1,\n      limit: 8,\n      orderBy: OrderBy.MOST_VIEWED,\n      sort: Sort.EXPIRING,\n    },\n    { refetchOnMountOrArgChange: true }\n  );\n\n  const { data: forYouOffers, isLoading: trendingOfferIsLoading } = useGetAllOffersQuery(\n    {\n      page: 1,\n      limit: 8,\n      // orderBy: OrderBy.MOST_VIEWED,\n      // sort: Sort.TRENDING,\n      forYou: true,\n    },\n    { refetchOnMountOrArgChange: true }\n  );\n\n  // const { data: forYouOffers }: any = useGetAllOffersForFiltersQuery(\n  //   { filter: \"trending\", page: 1, limit: 8 },\n  //   { refetchOnMountOrArgChange: 300 }\n  // );\n  // const { data: forYou, isLoading: forYouFetching }: any = useGetAllOffersForFiltersQuery(\n  //   { filter: \"for-you\", page: 1, limit: 12 },\n  //   { refetchOnMountOrArgChange: true }\n  // );\n\n  // const { data: recentlyViewed, isLoading: recentlyViewedFetching }: any =\n  //   useGetRecentlyViewedOffersQuery(\n  //     { session_id },\n  //     {\n  //       refetchOnMountOrArgChange: true,\n  //     }\n  //   );\n\n  const { data: trendingShops, isLoading: trendingShopsLoading } = useGetShopsQuery(\n    { page: 1, limit: 9 },\n    { refetchOnMountOrArgChange: true }\n  );\n  const { data: trendingShopsLogo, isLoading: trendingShopsLogoLoading } = useGetShopsQuery(\n    { page: 1, limit: 9 },\n    { refetchOnMountOrArgChange: true }\n  );\n\n  const { data: adsShops, isLoading: adsLoading } = useGetShopsQuery(\n    { page: 1, limit: 5 },\n    { refetchOnMountOrArgChange: true }\n  );\n\n  // const { data: trendingBrands, isLoading: trendingBrandsLoading }: any = useGetTrendingBrandsQuery(\n  //   { page: 1 },\n  //   { refetchOnMountOrArgChange: 300, skip: !token }\n  // );\n\n  const dashCardData = [\n    {\n      id: \"1\",\n      icon: DashIcon1,\n      label: \"Explore offers\",\n      onclick: () => navigate(\"category\"),\n    },\n    {\n      id: \"2\",\n      icon: DashIcon3,\n      label: \"Visit shops\",\n      onclick: () => navigate(\"shop\"),\n    },\n    {\n      id: \"3\",\n      icon: DashIcon5,\n      label: \"Earn bounties\",\n      onclick: () => navigate(`${GLOBAL_PREFIX}/bounties`),\n    },\n  ];\n\n  // console?.log(mixedOffer, \"MIXed\");\n\n  return (\n    <Flex flexDir={\"column\"} p=\"0px\">\n      {/* ----------------------------------------------------------------------NAV BAR------------------------------------------------------------ */}\n      {/* <DashboardNavBar /> */}\n      <NewDashboardNavBar />\n      {/* ----------------------------------------------------------------------TOP CARDS------------------------------------------------------------ */}\n      <Suspense fallback={<Spinner size=\"sm\" />}>\n        <Container>\n          <Stack {...root}>\n            <Text {...nameStyles} textTransform=\"uppercase\">\n              {user_data?.customer?.name ? (user_data?.customer?.name).replace(\" \", \", \") : \"\"}\n            </Text>\n\n            <Spacer />\n            <Flex>\n              <SimpleGrid columns={3} spacing=\"40px\" spacingX={\"60px\"} w={\"100%\"}>\n                <Suspense fallback={<Spinner size=\"sm\" />}>\n                  {dashCardData?.map((e, i) => (\n                    <DashboardCardItem\n                      key={nanoid()}\n                      onClick={e?.onclick}\n                      icon={e?.icon({\n                        color: \"\",\n                      })}\n                      cardName={e?.label}\n                      index={i}\n                    />\n                  ))}\n                </Suspense>\n              </SimpleGrid>\n            </Flex>\n\n            {/* ----------------------------------------------------------------------POPULAR DEALS------------------------------------------------------------ */}\n            <Flex w={\"100%\"} pt={\"50px\"}>\n              <HStack>\n                <PopularDeaslsSvg />\n                <Heading {...nameStyles}>POPULAR DEALS</Heading>\n              </HStack>\n\n              <Spacer />\n              <Suspense fallback={<Spinner size=\"sm\" />}>\n                <Center\n                  // className=\"dash-cards\"\n                  bg=\"dark\"\n                  color=\"white\"\n                  px=\"15px\"\n                  py=\"5px\"\n                  as=\"button\"\n                  onClick={() =>\n                    navigate(`see_all_offers_in_category/Popular_deals`, {\n                      state: Sort.POPULAR,\n                    })\n                  }\n                  {...nameStyles}\n                >\n                  SEE ALL OFFERS\n                </Center>\n              </Suspense>\n            </Flex>\n\n            {popularOfferIsLoading ? (\n              <SkeletonLoader />\n            ) : (\n              <Flex justify={\"space-between\"}>\n                <SimpleGrid\n                  columns={[2, 2, 3, 4, 4]}\n                  w={\"100%\"}\n                  spacingX={[\"35px\", \"35px\", \"35px\", \"15px\", \"35px\"]}\n                  spacingY={\"5px\"}\n                  justifyItems=\"space-between\"\n                >\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    {popularOffers?.data?.offers?.map((e, i: number) => (\n                      <DashboardProductItem\n                        key={nanoid()}\n                        isLoaded={isLoaded}\n                        productTitle={e?.name}\n                        points={`${e?.tokens}${e?.reward?.rewardSymbol}`}\n                        productSubtitle={e?.product?.category?.name}\n                        price={e?.originalPrice?.toLocaleString()}\n                        isNew={moment(moment()).diff(e?.createdAt, \"days\") < 3}\n                        // trending={e?.trending}\n                        rest={{ ...e }}\n                        i={i}\n                        bgImage={e?.offerImages}\n                        onClick={() =>\n                          // navigate(`${GLOBAL_PREFIX}/productDetails/${e?.slug}`, {\n                          //   state: { ...e },\n                          // })\n                          navigate(`${GLOBAL_PREFIX}/productDetails/${e?.offerCode}`)\n                        }\n                      />\n                    ))}\n                  </Suspense>\n                </SimpleGrid>\n              </Flex>\n            )}\n\n            {/* ----------------------------------------------------------------------NEW DEALS------------------------------------------------------------ */}\n            <Flex w={\"100%\"} pt={\"50px\"}>\n              <HStack>\n                <PopularDeaslsSvg />\n                <Heading {...nameStyles}>NEW DEALS</Heading>\n              </HStack>\n\n              <Spacer />\n              <Suspense fallback={<Spinner size=\"sm\" />}>\n                <Center\n                  // className=\"dash-cards\"\n                  bg=\"dark\"\n                  color=\"white\"\n                  px=\"15px\"\n                  py=\"5px\"\n                  as=\"button\"\n                  onClick={() =>\n                    navigate(`see_all_offers_in_category/Popular_deals`, {\n                      state: Sort.NEW,\n                    })\n                  }\n                  {...nameStyles}\n                >\n                  SEE ALL OFFERS\n                </Center>\n              </Suspense>\n            </Flex>\n\n            {newOfferIsLoading ? (\n              <SkeletonLoader />\n            ) : (\n              <Flex justify={\"space-between\"}>\n                <SimpleGrid\n                  columns={[2, 2, 3, 4, 4]}\n                  w={\"100%\"}\n                  spacingX={[\"35px\", \"35px\", \"35px\", \"15px\", \"35px\"]}\n                  spacingY={\"5px\"}\n                  justifyItems=\"space-between\"\n                >\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    {newOffers?.data?.offers.map((e, i: number) => (\n                      <DashboardProductItem\n                        key={nanoid()}\n                        isLoaded={isLoaded}\n                        productTitle={e?.name}\n                        points={`${e?.tokens}${e?.reward?.rewardSymbol}`}\n                        productSubtitle={e?.product?.category?.name}\n                        price={e?.originalPrice?.toLocaleString()}\n                        isNew={moment(moment()).diff(e?.createdAt, \"days\") < 3}\n                        // trending={e?.trending}\n                        rest={{ ...e }}\n                        i={i}\n                        bgImage={e?.offerImages}\n                        onClick={() =>\n                          // navigate(`${GLOBAL_PREFIX}/productDetails/${e?.slug}`, {\n                          //   state: { ...e },\n                          // })\n                          navigate(`${GLOBAL_PREFIX}/productDetails/${e?.offerCode}`)\n                        }\n                      />\n                    ))}\n                  </Suspense>\n                </SimpleGrid>\n              </Flex>\n            )}\n\n            {/* ----------------------------------------------------------------------FOR YOU DEALS------------------------------------------------------------ */}\n            <Flex w={\"100%\"} pt={\"50px\"}>\n              <HStack>\n                <PopularDeaslsSvg />\n                <Heading {...nameStyles}>FOR YOU TODAY</Heading>\n              </HStack>\n\n              <Spacer />\n              <Suspense fallback={<Spinner size=\"sm\" />}>\n                <Center\n                  // className=\"dash-cards\"\n                  bg=\"dark\"\n                  color=\"white\"\n                  px=\"15px\"\n                  py=\"5px\"\n                  as=\"button\"\n                  onClick={() =>\n                    navigate(`see_all_offers_in_category/Popular_deals`, {\n                      state: Sort.TRENDING,\n                    })\n                  }\n                  {...nameStyles}\n                >\n                  SEE ALL OFFERS\n                </Center>\n              </Suspense>\n            </Flex>\n\n            {trendingOfferIsLoading ? (\n              <SkeletonLoader />\n            ) : (\n              <Flex justify={\"space-between\"}>\n                <SimpleGrid\n                  columns={[2, 2, 3, 4, 4]}\n                  w={\"100%\"}\n                  spacingX={[\"35px\", \"35px\", \"35px\", \"15px\", \"35px\"]}\n                  spacingY={\"5px\"}\n                  justifyItems=\"space-between\"\n                >\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    {forYouOffers?.data?.offers?.map((e, i: number) => (\n                      <DashboardProductItem\n                        key={nanoid()}\n                        isLoaded={isLoaded}\n                        productTitle={e?.name}\n                        points={`${e?.tokens}${e?.reward?.rewardSymbol}`}\n                        productSubtitle={e?.product?.category?.name}\n                        price={e?.originalPrice?.toLocaleString()}\n                        isNew={moment(moment()).diff(e?.createdAt, \"days\") < 3}\n                        // trending={e?.trending}\n                        rest={{ ...e }}\n                        i={i}\n                        bgImage={e?.offerImages}\n                        onClick={() =>\n                          // navigate(`${GLOBAL_PREFIX}/productDetails/${e?.slug}`, {\n                          //   state: { ...e },\n                          // })\n                          navigate(`${GLOBAL_PREFIX}/productDetails/${e?.offerCode}`)\n                        }\n                      />\n                    ))}\n                  </Suspense>\n                </SimpleGrid>\n              </Flex>\n            )}\n\n            {/* ----------------------------------------------------------------------NEW DEALS------------------------------------------------------------ */}\n            <Flex w={\"100%\"} pt={\"50px\"}>\n              <HStack>\n                <PopularDeaslsSvg />\n                <Heading {...nameStyles}>EXPIRING DEALS</Heading>\n              </HStack>\n\n              <Spacer />\n              <Suspense fallback={<Spinner size=\"sm\" />}>\n                <Center\n                  // className=\"dash-cards\"\n                  bg=\"dark\"\n                  color=\"white\"\n                  px=\"15px\"\n                  py=\"5px\"\n                  as=\"button\"\n                  onClick={() =>\n                    navigate(`see_all_offers_in_category/Popular_deals`, {\n                      state: Sort.EXPIRING,\n                    })\n                  }\n                  {...nameStyles}\n                >\n                  SEE ALL OFFERS\n                </Center>\n              </Suspense>\n            </Flex>\n\n            {expiringOfferIsLoading ? (\n              <SkeletonLoader />\n            ) : (\n              <Flex justify={\"space-between\"}>\n                <SimpleGrid\n                  columns={[2, 2, 3, 4, 4]}\n                  w={\"100%\"}\n                  spacingX={[\"35px\", \"35px\", \"35px\", \"15px\", \"35px\"]}\n                  spacingY={\"5px\"}\n                  justifyItems=\"space-between\"\n                >\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    {expiringOffers?.data?.offers?.map((e, i: number) => (\n                      <DashboardProductItem\n                        key={nanoid()}\n                        isLoaded={isLoaded}\n                        productTitle={e?.name}\n                        points={`${e?.tokens}${e?.reward?.rewardSymbol}`}\n                        productSubtitle={e?.product?.category?.name}\n                        price={e?.originalPrice?.toLocaleString()}\n                        isNew={true}\n                        // trending={e?.trending}\n                        rest={{ ...e }}\n                        i={i}\n                        bgImage={e?.offerImages}\n                        onClick={() =>\n                          // navigate(`${GLOBAL_PREFIX}/productDetails/${e?.slug}`, {\n                          //   state: { ...e },\n                          // })\n                          navigate(`${GLOBAL_PREFIX}/productDetails/${e?.offerCode}`)\n                        }\n                      />\n                    ))}\n                  </Suspense>\n                </SimpleGrid>\n              </Flex>\n            )}\n\n            {/* -------------------------------------------------------------- ADS CAROUSEL----------------------------------------------------------------------------- */}\n\n            <Box pt=\"30px\">\n              <Slider {...settings}>\n                {adsShops?.data?.brands.map((e) => (\n                  <Flex\n                    key={nanoid()}\n                    backgroundColor={\"grey\"}\n                    w=\"100%\"\n                    h=\"300px\"\n                    borderRadius={\"20px\"}\n                    background={`url(${\n                      e?.banners\n                        ? e?.banners[0]\n                        : \"https://images.unsplash.com/photo-1614851099175-e5b30eb6f696?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8MTB8fGJhbm5lcnxlbnwwfHwwfHx8MA%3D%3D&w=1000&q=80\"\n                    }) center/cover no-repeat`}\n                    justifyContent=\"center\"\n                    align=\"center\"\n                    as={Image}\n                    fallbackSrc={Images_Icons.appLogoPlaceholder}\n                    fallbackStrategy={\"onError\"}\n                    objectFit=\"cover\"\n                  >\n                    {/* <Image\n                      src={e?.logo}\n                      w=\"100px\"\n                      h=\"100%\"\n                      objectFit={\"contain\"}\n                      bg=\"red\"\n                      alignSelf={\"center\"}\n                    /> */}\n                  </Flex>\n                ))}\n              </Slider>\n            </Box>\n\n            {/* --------------------------------------------------------------------TRENDING SHOPS------------------------------------------------------------ */}\n            <Box>\n              <Flex w={\"100%\"} pt={\"50px\"}>\n                <HStack>\n                  <TrendingShopsSvg />\n                  <Heading {...nameStyles}>TRENDING SHOPS</Heading>\n                </HStack>\n\n                <Spacer />\n                <Suspense fallback={<Spinner size=\"sm\" />}>\n                  <Center\n                    // className=\"dash-cards\"\n                    bg=\"dark\"\n                    color=\"white\"\n                    px=\"15px\"\n                    py=\"5px\"\n                    as=\"button\"\n                    onClick={() => navigate(\"shop\")}\n                    {...nameStyles}\n                  >\n                    SEE ALL SHOPS\n                  </Center>\n                </Suspense>\n              </Flex>\n\n              <SimpleGrid\n                columns={[2, 3, 4, 4, 6]}\n                w={\"100%\"}\n                spacingX={[\"35px\", \"35px\", \"55px\", \"35px\", \"35px\"]}\n                spacingY={\"5px\"}\n                justifyItems=\"space-between\"\n              >\n                <Suspense fallback={<Spinner size=\"sm\" />}>\n                  {trendingShopsLogo?.data?.brands?.map((e, i: number) => (\n                    <DashboardShopItem\n                      key={nanoid()}\n                      icon={\n                        <>\n                          <Image src={e?.logo} w=\"100px\" h=\"100%\" objectFit={\"contain\"} />\n                        </>\n                      }\n                      index={i}\n                      onClick={() =>\n                        navigate(`${GLOBAL_PREFIX}/dashboard/shop/${e?.id}`, {\n                          state: {\n                            id: e?.id,\n                            slug: e?.slug,\n                            brandName: e?.name,\n                          },\n                        })\n                      }\n                    />\n                  ))}\n                </Suspense>\n              </SimpleGrid>\n            </Box>\n\n            {/* ----------------------------------------------------------------------RECENTLY VIEWeD ------------------------------------------------------------ */}\n            {/* {[]?.length > 0 && (\n              <Box>\n                <Flex w={\"100%\"} pt={\"50px\"}>\n                  <HStack>\n                    <RecentlyViewedsSvg />\n                    <Heading {...nameStyles}>RECENTLY VIEWED</Heading>\n                  </HStack>\n                </Flex>\n\n                {recentlyViewedFetching ? (\n                  <SkeletonLoader />\n                ) : (\n                  <SimpleGrid\n                    columns={[2, 2, 3, 4, 4]}\n                    w={\"100%\"}\n                    spacingX={\"25px\"}\n                    spacingY={\"5px\"}\n                  >\n                    <Suspense fallback={<Spinner size=\"sm\" />}>\n                      {[]?.map((e: OfferDataProps, i: number) => (\n                        <DashboardProductItem\n                          key={nanoid()}\n                          isLoaded={isLoaded}\n                          productTitle={e?.name}\n                          points={`${e?.tokens}${e?.reward?.rewardSymbol}`}\n                          productSubtitle={e?.product?.category?.name}\n                          price={e?.originalPrice?.toLocaleString()}\n                          isNew={moment(moment()).diff(e?.createdAt, \"days\") < 3}\n                          // trending={e?.trending}\n                          rest={{ ...e }}\n                          i={i}\n                          bgImage={e?.offerImages}\n                          onClick={() =>\n                            // navigate(`${GLOBAL_PREFIX}/productDetails/${e?.slug}`, {\n                            //   state: { ...e },\n                            // })\n                            navigate(`${GLOBAL_PREFIX}/productDetails/${e?.offerCode}`)\n                          }\n                        />\n                      ))}\n                    </Suspense>\n                  </SimpleGrid>\n                )}\n              </Box>\n            )} */}\n\n            {/* <SimpleGrid\n              columns={[2, 2, 3, 4, 4]}\n              w={\"100%\"}\n              spacingX={\"25px\"}\n              spacingY={\"5px\"}\n            >\n              <Suspense fallback={<Spinner size=\"sm\" />}>\n                {expiringOffers?.data?.offers?.map(\n                  (\n                    e: {\n                      id: number;\n                      slug: string;\n\n                      name: string;\n                      category: { name: string };\n                      price: number | string;\n                      point_discount: number | string;\n                      isNew: boolean;\n                      created_at: string;\n                      images: Array<string>;\n                      reward: {\n                        rewardSymbol: string;\n                      };\n                    },\n                    i: number\n                  ) => (\n                    <DashboardProductItem\n                      key={nanoid()}\n                      isLoaded={isLoaded}\n                      productTitle={e?.name}\n                      points={`${e?.point_discount}${e?.reward?.rewardSymbol}`}\n                      productSubtitle={e?.category?.name}\n                      price={e?.price}\n                      isNew={e?.isNew}\n                      rest={{ ...e }}\n                      i={i}\n                      // trending={e?.trending}\n                      bgImage={[]}\n                      onClick={() =>\n                        navigate(`${GLOBAL_PREFIX}/productDetails/${e?.slug}`)\n                      }\n                    />\n                  )\n                )}\n              </Suspense>\n            </SimpleGrid> */}\n            {/* ----------------------------------------------------------------------BROWSE BRANDS------------------------------------------------------------ */}\n            <Flex>\n              <Suspense fallback={<Spinner size=\"sm\" />}>\n                <BrandsSliderCarousel\n                  carouselTitle={\"Browse brands\"}\n                  items={trendingShops?.data?.brands}\n                  seeMoreClick={() => navigate(\"shop\")}\n                />\n              </Suspense>\n            </Flex>\n          </Stack>\n        </Container>\n      </Suspense>\n      <Suspense fallback={<Spinner size=\"sm\" />}>\n        <Footer />\n      </Suspense>\n    </Flex>\n  );\n};\n\nexport default Dashboard;\n"],"names":["_ref","root","useStyles","_jsx","SimpleGrid","columns","w","spacingX","spacingY","children","map","_createElement","Flex","_objectSpread","flexDir","key","nanoid","_jsxs","Box","Skeleton","borderRadius","base","md","isLoaded","h","bg","overflow","className","as","pos","mt","justify","align","Text","fontSize","noOfLines","opacity","HStack","Heading","pt","pb","BrandsSliderCarousel","lazy","DashboardProductItem","DashboardCardItem","DashboardShopItem","Footer","Container","useDispatch","_user_data$customer","_user_data$customer2","_popularOffers$data","_popularOffers$data$o","_newOffers$data","_forYouOffers$data","_forYouOffers$data$of","_expiringOffers$data","_expiringOffers$data$","_adsShops$data","_trendingShopsLogo$da","_trendingShopsLogo$da2","_trendingShops$data","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","_useDashboardStyles","useDashboardStyles","nameStyles","_useSelector","button","loadMore","useSelector","state","authReducer","user_data","token","session_id","userReducer","_useGetAllOffersQuery","useGetAllOffersQuery","page","limit","orderBy","OrderBy","sort","Sort","refetchOnMountOrArgChange","popularOffers","data","popularOfferIsLoading","isLoading","_useGetAllOffersQuery2","newOffers","newOfferIsLoading","_useGetAllOffersQuery3","expiringOffers","expiringOfferIsLoading","_useGetAllOffersQuery4","forYou","forYouOffers","trendingOfferIsLoading","_useGetShopsQuery","useGetShopsQuery","trendingShops","_useGetShopsQuery2","trendingShopsLogo","_useGetShopsQuery3","adsShops","dashCardData","id","icon","DashIcon1","label","onclick","DashIcon3","DashIcon5","concat","GLOBAL_PREFIX","p","NewDashboardNavBar","Suspense","fallback","Spinner","size","Stack","textTransform","customer","name","replace","Spacer","spacing","e","i","onClick","color","cardName","index","PopularDeaslsSvg","Center","px","py","SkeletonLoader","justifyItems","offers","_e$reward","_e$product","_e$product$category","_e$originalPrice","productTitle","points","tokens","reward","rewardSymbol","productSubtitle","product","category","price","originalPrice","toLocaleString","isNew","moment","diff","createdAt","rest","bgImage","offerImages","offerCode","_e$reward2","_e$product2","_e$product2$category","_e$originalPrice2","_e$reward3","_e$product3","_e$product3$category","_e$originalPrice3","_e$reward4","_e$product4","_e$product4$category","_e$originalPrice4","Slider","dots","infinite","speed","slidesToShow","slidesToScroll","vertical","arrows","autoplay","swipeToSlide","draggable","autoplaySpeed","adaptiveHeight","centerPadding","verticalSwiping","brands","backgroundColor","background","banners","justifyContent","Image","fallbackSrc","Images_Icons","fallbackStrategy","objectFit","TrendingShopsSvg","_Fragment","src","logo","slug","brandName","carouselTitle","items","seeMoreClick"],"sourceRoot":""}