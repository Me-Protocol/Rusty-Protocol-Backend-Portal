{"version":3,"file":"static/js/1313.34ef8426.chunk.js","mappings":"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","sources":["components/TopIconBar/index.tsx","pages/AuthenticationModule/EmailVerificationLoading/EmailVerificationLoading.tsx","pages/AuthenticationModule/Login/Login.tsx"],"sourcesContent":["// @flow\nimport React, { lazy, FC, memo } from \"react\";\nimport { Flex, Image } from \"@chakra-ui/react\";\nimport iconsImages from \"../../constants/icons-images\";\nimport { useNavigate } from \"react-router-dom\";\nimport Container from \"../Container\";\nimport { useSelector } from \"react-redux\";\nimport { AuthReducerProps } from \"../../interfaces\";\nimport { RootState } from \"../../redux/store\";\nimport { GLOBAL_PREFIX } from \"../../constants\";\n\ninterface TopIconBarProps {\n  pos?: any;\n}\n\nconst TopIconBar: FC<TopIconBarProps> = ({ pos }): JSX.Element => {\n  let navigate = useNavigate();\n\n  const { token }: AuthReducerProps = useSelector(\n    (state: RootState) => state.authReducer\n  );\n\n  const { styles, img } = useStyles();\n  return (\n    <Container>\n      <Flex\n        as={\"button\"}\n        onClick={() => {\n          token\n            ? navigate(`${GLOBAL_PREFIX}/dashboard`)\n            : navigate(`${GLOBAL_PREFIX}/`);\n        }}\n        position={pos || \"absolute\"}\n        {...styles}\n      >\n        <Image\n          // as=\"button\"\n          data-testid={\"logo-1\"}\n          src={iconsImages.appLogo}\n          {...img}\n        />\n      </Flex>\n    </Container>\n  );\n};\n\nexport default memo(TopIconBar);\n\nconst useStyles = () => {\n  return {\n    styles: {\n      w: \"100%\",\n      h: \"50px\",\n      justifyContent: \"flex-start\",\n    },\n    img: {\n      mt: 5,\n      // w: \"80px\",\n      h: \"50px\",\n    },\n  };\n};\n","// @flow\nimport {Flex, Heading, Image, Input, Text, VStack} from \"@chakra-ui/react\";\nimport Images_Icons from \"../../../constants/icons-images\";\nimport {useState} from \"react\";\nimport MeProtocolButton from \"../../../components/MeProtocolFormikButton\";\nimport TopIconBar from \"../../../components/TopIconBar\";\nimport {useNavigate} from \"react-router-dom\";\nimport CountrySelector from \"../../../components/CountrySelector\";\nimport {useStyles} from \"../Login/Login\";\nimport MeProtocolInput from \"../../../components/MeProtocolInput\";\n// @ts-ignore\nimport OtpTimer from \"otp-timer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AuthReducerProps} from \"../../../interfaces\";\nimport {RootState} from \"../../../redux/store\";\n\nexport const EmailVerificationLoading = () => {\n    let navigate = useNavigate();\n    const dispatch = useDispatch<Dispatch>()\n    // const {user_data} = useSelector((state: RootState) => state.userReducer)\n    const {\n        root,\n        boxLeft,\n        boxLogin,\n        leftImg,\n        loginColumn,\n        head,\n        desc,\n    } = useStyles()\n    const {\n        token,\n        registerError,\n        registerErrorMsg,\n        registerLoading,\n        registerResponse,\n    }: AuthReducerProps = useSelector((state: RootState) => state.authReducer);\n\n    const [country, setCountry] = useState<string>(\"566\")\n    const submit = () => {\n        console.log(\"button clicked\");\n    };\n\n    async function SendVerificationMail() {\n        try {\n\n\n        } catch (e) {\n\n        }\n    }\n\n    return (\n        <>\n            <TopIconBar/>\n            <Flex {...root}>\n                <Flex {...boxLeft}>\n                    <Image src={Images_Icons.AuthImage} alt='Me Protocol' {...leftImg}/>\n                </Flex>\n                <Flex {...boxLogin} >\n                    <VStack {...loginColumn}>\n                        <Heading {...head} pb={2}>Verify your email address</Heading>\n                        <Text {...desc}>An email containing the verification link has been sent to your email, please go\n                            to your email and click on the link to verify your account.</Text>\n                        <Text flexDir={\"row\"} {...desc} textDecoration={\"underline\"}>My link didn't arrive? Resend link\n                            in <OtpTimer\n                                minutes={1}\n                                seconds={1}\n                                text=\" \"\n                                ButtonText=\"Resend\"\n                                resend={submit}\n                                background={\"black\"}\n                            /></Text>\n\n\n                        {/*<MeProtocolButton isDisabled={true} name={\"Resend\"}/>*/}\n                    </VStack>\n                </Flex>\n            </Flex>\n        </>\n\n    );\n};\n\nexport default EmailVerificationLoading\n\n","// @flow\nimport { Button, Divider, Flex, Heading, Link, Spinner, Text, VStack } from \"@chakra-ui/react\";\nimport { lazy, Suspense, useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { Formik, FormikHelpers, FormikValues } from \"formik\";\nimport { AuthReducerProps, LoginFormikValues, UserReducerProps } from \"../../../interfaces\";\nimport { GLOBAL_PREFIX, LoginValidationSchema } from \"../../../constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { loginFn, resetErrorMsg } from \"../../../redux/AuthSlice\";\nimport { RootState } from \"../../../redux/store\";\nimport { useOnline } from \"rooks\";\nimport { BASE_URL } from \"../../../config\";\nimport Container from \"../../../components/Container\";\nimport { getUserInfo } from \"../../../redux/UserSlice\";\nconst TopIconBar = lazy(() => import(\"../../../components/TopIconBar\"));\nconst MeProtocolButton = lazy(() => import(\"../../../components/MeProtocolButton\"));\nconst MeProtocolFormikButton = lazy(() => import(\"../../../components/MeProtocolFormikButton\"));\nconst MeProtocolInput = lazy(() => import(\"../../../components/MeProtocolInput\"));\n\nexport const Login = () => {\n  let location = useLocation();\n  let navigate = useNavigate();\n  const online = useOnline();\n  const dispatch = useDispatch<Dispatch>();\n  const [googleLoading, setGoogleLoading] = useState<boolean>(false);\n  const { isLoading, error, token }: AuthReducerProps = useSelector(\n    (state: RootState) => state.authReducer\n  );\n  const { user_data }: UserReducerProps = useSelector((state: RootState) => state.userReducer);\n  const [errorMsg, setErrorMsg] = useState<string>(\" \");\n  const [show, setShow] = useState(false);\n\n  const { root, boxLeft, boxLogin, leftImg, loginColumn, head, desc, basedText } = useStyles();\n  // useEffect(() => {\n  //   if (!token) {\n  //     navigate(`${GLOBAL_PREFIX}/login`);\n  //   }\n  // });\n\n  useEffect(() => {\n    dispatch(resetErrorMsg());\n    // console.log(location, \"LOCAAA\");\n\n    if (token) {\n      dispatch(resetErrorMsg());\n      navigate(`${GLOBAL_PREFIX}/dashboard`);\n    }\n  }, [dispatch, token, navigate]);\n\n  const onSubmit = async (\n    { email, password }: FormikValues,\n    actions: FormikHelpers<LoginFormikValues>\n  ) => {\n    if (!online) return;\n    // const data: any = await dispatch(loginFn({email, password}));\n    // console.log(data, \"TESRRRSE\")\n    // return\n    const { payload, error }: any = await dispatch(loginFn({ identifier: email, password }));\n    if (error) {\n      return setErrorMsg(error?.message);\n    }\n\n    if (payload) {\n      const { payload: userPayload }: any = await dispatch(getUserInfo({ token: payload }));\n\n      if (userPayload?.customer?.walletAddress) {\n        navigate(`${GLOBAL_PREFIX}/dashboard`);\n      } else {\n        navigate(`${GLOBAL_PREFIX}/syncRewards`);\n      }\n    }\n    // if (payload) {\n    //   // IF PHONE IS NOT ADDED GO TO PHONE VERIFICATION PAGE\n    //   if (payload?.access_token?.phones?.length < 1) {\n    //     navigate(`${GLOBAL_PREFIX}/phone_auth`, {\n    //       state: payload?.access_token,\n    //     });\n    //     return;\n    //   }\n    //   // IF PHONE NUMBER IS ADDED BUT 2FA IS ENABLED GO TO PHONE CODE VERIFICATION PAGE\n    //   if (payload?.access_token?.phones?.length > 0) {\n    //     const { status }: { status: number } = await axios.get(\n    //       `${BASE_URL}/users/phone/${payload?.access_token?.phones[0].phone}/${payload?.access_token?.user?.userId}`\n    //     );\n    //     if (status === 200) {\n    //       navigate(`${GLOBAL_PREFIX}/code_input`, {\n    //         state: {\n    //           state: payload?.access_token,\n    //           value: payload?.access_token?.phones[0],\n    //         },\n    //       });\n    //     }\n    //     return;\n    //   }\n    //   //IF 2FA IS DISABLED LOGIN DIRECTLY\n    //   if (payload?.access_token?.token) {\n    //     // console.log(payload, \"JJOOPOJHUHUUHU\");\n    //     // navigate(`${GLOBAL_PREFIX}/dashboard`);\n\n    //     await dispatch(getUserInfo({ token: payload?.access_token?.token }));\n    //     dispatch(GET_WALLETS({ token: payload?.access_token?.token }));\n    //     dispatch(getUserCollection({ token: payload?.access_token?.token }));\n\n    //     if (user_data?.customer?.walletAddress) {\n    //       navigate(`${GLOBAL_PREFIX}/dashboard`);\n    //     } else {\n    //       navigate(`${GLOBAL_PREFIX}/syncRewards`);\n    //     }\n    //   }\n    // }\n  };\n  const handleClick = () => setShow(!show);\n\n  async function SignInWithGoogle() {\n    let config = {\n      method: \"post\",\n      url: `${BASE_URL}/user/google`,\n    };\n\n    try {\n      setGoogleLoading(true);\n      // const { data }: any = await axios(config);\n      // console.log(data,\"hhhhhhhh\")\n      // if (data) {\n      //   window.location.replace(data.url);\n      window.location.replace(`${BASE_URL}/user/google`);\n      // }\n    } catch (e: any | unknown) {\n      console.log(e, \"err google\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  async function SignInWithTwitter() {\n    try {\n      window.location.replace(`${BASE_URL}/users/twitter`);\n    } catch (e: any | unknown) {\n      console.log(e, \"err twitter\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  async function SignInWithFacebook() {\n    try {\n      window.location.replace(`${BASE_URL}/users/facebook`);\n    } catch (e: any | unknown) {\n      console.log(e, \"err twitter\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Container>\n        <Suspense fallback={<Spinner size=\"sm\" />}>\n          <TopIconBar pos={\"fixed\"} />\n        </Suspense>\n        <Flex {...root}>\n          <Flex {...boxLogin}>\n            <Formik\n              initialValues={{ email: \"\", password: \"\" }}\n              validationSchema={LoginValidationSchema}\n              //@ts-ignore\n              onSubmit={onSubmit}\n            >\n              {(formik) => (\n                <VStack\n                  as={\"form\"}\n                  {...loginColumn}\n                  //@ts-ignore\n                  onSubmit={formik.handleSubmit}\n                  onChange={() => dispatch(resetErrorMsg())}\n                >\n                  <Heading {...head} pb={2}>\n                    Let’s Login\n                  </Heading>\n\n                  <Flex w={\"100%\"} justify={\"space-between\"}>\n                    <Suspense fallback={<Spinner size=\"sm\" />}>\n                      <Link href={`${BASE_URL}/user/google`} w=\"full\">\n                        <MeProtocolButton\n                          isLoading={googleLoading}\n                          name={\"Sign in with Google\"}\n                          onClick={() => {\n                            // window.location.replace(`${BASE_URL}/user/google`);\n                          }}\n                          // onClick={SignInWithGoogle}\n                          rest={{ w: \"100%\" }}\n                        />\n                      </Link>\n                    </Suspense>\n\n                    {/* <Flex w={\"25%\"} justify={\"space-between\"}>\n                      <Center\n                        as={Button}\n                        bg={\"#F6F6F6\"}\n                        h={\"40px\"}\n                        w={\"65px\"}\n                        borderRadius={\"25px\"}\n                        onClick={SignInWithFacebook}\n                        _hover={{ bg: \"black\", color: \"light\" }}\n                        role=\"group\"\n                      >\n                        <Icon\n                          color={\"#999999\"}\n                          w={\"20px\"}\n                          h={\"20px\"}\n                          as={FaFacebookSquare}\n                          _groupHover={{ color: \"light\" }}\n                        />\n                      </Center>\n\n                      <Center\n                        as={Button}\n                        bg={\"#F6F6F6\"}\n                        h={\"40px\"}\n                        w={\"65px\"}\n                        ml=\"5px\"\n                        borderRadius={\"25px\"}\n                        onClick={SignInWithTwitter}\n                        _hover={{ bg: \"black\", color: \"light\" }}\n                        role=\"group\"\n                      >\n                        <Icon\n                          color={\"#999999\"}\n                          w={\"20px\"}\n                          h={\"20px\"}\n                          as={FaTwitter}\n                          // _hover={{ color: \"light\" }}\n                          _groupHover={{ color: \"light\" }}\n                        />\n                      </Center>\n                    </Flex> */}\n                  </Flex>\n                  <Flex align={\"center\"} w={\"100%\"} justify={\"space-between\"}>\n                    <Divider w={\"45%\"} color={\"#ECECEC\"} />\n                    <Text color={\"#999999\"} fontSize={{ base: \"12px\", md: \"20px\" }}>\n                      or\n                    </Text>\n                    <Divider w={\"45%\"} color={\"#ECECEC\"} />\n                  </Flex>\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    <MeProtocolInput name={\"email\"} type={\"email\"} placeholder={\"your@email.com\"} />\n\n                    <MeProtocolInput\n                      name={\"password\"}\n                      type={show ? \"text\" : \"password\"}\n                      placeholder={\"Password\"}\n                    />\n                  </Suspense>\n\n                  <Text\n                    as={Button}\n                    onClick={handleClick}\n                    alignSelf={\"flex-end\"}\n                    {...basedText}\n                    bg={\"transparent\"}\n                    _hover={{ bg: \"transparent\" }}\n                    p=\"0px\"\n                    fontSize={\"14px\"}\n                  >\n                    {!show ? \"Show\" : \"Hide\"}\n                  </Text>\n\n                  {errorMsg && (\n                    <Text {...desc} color={\"red\"}>\n                      {errorMsg}\n                    </Text>\n                  )}\n                  <Link\n                    onClick={() => navigate(`${GLOBAL_PREFIX}/password_reset`)}\n                    {...desc}\n                    pb={3}\n                    textDecoration={\"underline\"}\n                    w={\"30%\"}\n                  >\n                    Forgot Password\n                  </Link>\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    <MeProtocolFormikButton isLoading={isLoading} name={\"Login\"} />\n                  </Suspense>\n\n                  <Text {...desc} pt={\"10px\"}>\n                    Don’t have an account yet?\n                    <Link\n                      onClick={() => {\n                        navigate(`${GLOBAL_PREFIX}/register`);\n                      }}\n                      textDecoration={\"underline\"}\n                    >\n                      {\" \"}\n                      Create one here.\n                    </Link>\n                  </Text>\n                </VStack>\n              )}\n            </Formik>\n          </Flex>\n        </Flex>\n      </Container>\n    </>\n  );\n};\n\nexport default Login;\n\nexport const useStyles = () => {\n  return {\n    root: {\n      h: \"100vh\",\n      align: \"center\",\n      justify: \"center\",\n      bg: \"light\",\n    },\n    boxLeft: {\n      display: [\"none\", \"none\", \"none\", \"flex\", \"flex\"],\n      bg: \"light\",\n      fontSize: 40,\n      h: \"100%\",\n      w: \"40vw\",\n    },\n    boxLogin: {\n      // bg: \"light\",\n      // bg: \"red\",\n      fontSize: 40,\n      // justify: \"center\",\n      h: \"100%\",\n      w: [\"100%\", \"100%\", \"80%\", \"50%\", \"50%\"],\n      overflow: \"hidden\",\n    },\n    boxRegister: {\n      fontSize: 40,\n      h: \"100vh\",\n      w: [\"100%\", \"100%\", \"80%\", \"80%\", \"70%\"],\n      justify: \"center\",\n    },\n    leftImg: {\n      h: \"100%\",\n      w: \"100%\",\n    },\n    loginColumn: {\n      bg: \"light\",\n      w: \"100%\",\n      align: \"flex-start\",\n      pt: {\n        base: \"5vh\",\n        md: \"10vh\",\n      },\n      px: {\n        base: \"15px\",\n      },\n      justifySelf: \"center\",\n    },\n    registerColumn: {\n      bg: \"light\",\n      w: [\"100%\", \"100%\", \"100%\", \"80%\", \"70%\"],\n      align: \"flex-start\",\n      pt: {\n        base: \"5vh\",\n        md: \"10vh\",\n      },\n      px: {\n        base: \"15px\",\n        // md: 20\n      },\n      justifySelf: \"center\",\n    },\n    head: {\n      fontSize: {\n        base: \"18px\",\n        md: \"25px\",\n      },\n      pt: \"20px\",\n    },\n    desc: {\n      // pb: \"5px\",\n      fontSize: {\n        base: \"15px\",\n        md: \"17px\",\n      },\n      w: {\n        base: \"100%\",\n        md: \"85%\",\n      },\n    },\n    basedText: {\n      pt: \"30px\",\n      fontSize: {\n        base: \"18px\",\n        md: \"20px\",\n      },\n    },\n    checkBoxRoot: {\n      py: \"20px\",\n    },\n    countrySelect: {\n      w: {\n        base: \"100%\",\n        md: \"100%\",\n      },\n      bg: \"grey\",\n      color: \"dark\",\n      borderColor: \"light\",\n      borderWidth: \"1px\",\n      align: \"center\",\n    },\n  };\n};\n"],"names":["TopIconBar","_ref","pos","navigate","useNavigate","token","useSelector","state","authReducer","_useStyles","useStyles","styles","img","_jsx","Container","children","Flex","_objectSpread","as","onClick","concat","GLOBAL_PREFIX","position","Image","src","iconsImages","appLogo","memo","w","h","justifyContent","mt","useDispatch","root","boxLeft","boxLogin","leftImg","loginColumn","head","desc","_useSelector","_useState","registerError","registerErrorMsg","registerLoading","registerResponse","useState","_useState2","_slicedToArray","_jsxs","_Fragment","Images_Icons","AuthImage","alt","VStack","Heading","pb","Text","flexDir","textDecoration","OtpTimer","minutes","seconds","text","ButtonText","resend","console","log","background","lazy","MeProtocolButton","MeProtocolFormikButton","MeProtocolInput","useLocation","online","useOnline","dispatch","googleLoading","isLoading","error","_useState3","userReducer","user_data","_useState4","errorMsg","setErrorMsg","_useState5","_useState6","show","setShow","basedText","useEffect","resetErrorMsg","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","actions","email","password","_yield$dispatch","payload","_userPayload$customer","_yield$dispatch2","userPayload","wrap","_context","prev","next","abrupt","loginFn","identifier","sent","message","getUserInfo","customer","walletAddress","stop","_x","_x2","apply","arguments","handleClick","Suspense","fallback","Spinner","size","Formik","initialValues","validationSchema","LoginValidationSchema","formik","handleSubmit","onChange","justify","Link","href","BASE_URL","name","rest","align","Divider","color","fontSize","base","md","type","placeholder","Button","alignSelf","bg","_hover","p","pt","display","overflow","boxRegister","px","justifySelf","registerColumn","checkBoxRoot","py","countrySelect","borderColor","borderWidth"],"sourceRoot":""}