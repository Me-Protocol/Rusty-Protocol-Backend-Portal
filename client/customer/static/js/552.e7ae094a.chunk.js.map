{"version":3,"file":"static/js/552.e7ae094a.chunk.js","mappings":"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","sources":["components/MeProtocolFilters/index.tsx","../node_modules/@chakra-ui/popover/src/popover-body.tsx"],"sourcesContent":["// @flow\nimport { FC, memo, useRef } from \"react\";\nimport {\n  Box,\n  HStack,\n  Text,\n  PopoverHeader,\n  PopoverBody,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Icon,\n  Spacer,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { nanoid } from \"nanoid\";\nimport { FaSearch } from \"react-icons/fa\";\nimport PopoverComponent from \"../PopoverComponent\";\n\ninterface MeProtocolFiltersProps {\n  filterOptions?: Array<string> | undefined;\n}\n\nconst MeProtocolFilters: FC<MeProtocolFiltersProps> = ({\n  filterOptions,\n}): JSX.Element => {\n  const { root, font, popFont, popContentStyle } = useStyles();\n  const { onOpen, onClose, isOpen } = useDisclosure();\n  const sortRef = useRef<any>(null);\n  const allCategories = [\n    \"Shop All\",\n    \"Fashion\",\n    \"Outdoor activities\",\n    \"Personal care\",\n    \"Health & Nutrition\",\n  ];\n  const suggestedBrands = [\n    \"Nike\",\n    \"Zara\",\n    \"Starbucks\",\n    \"Personal care\",\n    \"Health & Nutrition\",\n  ];\n  const allBrands = [\"Adidas\", \"A Loves A\"];\n  const allSizes = [\"4\", \"5\", \"6\", \"7\", \"7.5\", \"8\", \"8.5\", \"9\", \"10\"];\n  // const allPrices = [];\n  const allColors = [\n    \"All colors\",\n    \"Brown\",\n    \"Beige\",\n    \"Grey\",\n    \"White\",\n    \"Blue\",\n    \"Petrol\",\n    \"Orange\",\n    \"Green\",\n  ];\n  const sort = [\n    \"Favorites\",\n    \"Price: Low → High\",\n    \"Price: High → Low\",\n    \"Most Popular\",\n    \"Trending\",\n    \"Expiring soon\",\n  ];\n\n  // const allMaterials = [];\n  // console.log(filterOptions, \"OPOPOPO\");\n\n  return (\n    <HStack w={\"100%\"}>\n      {filterOptions?.includes(\"category\") && (\n        <PopoverComponent label=\"Category\">\n          {allCategories?.map((e, i) => (\n            <PopoverHeader {...font} key={nanoid()}>\n              {e}\n            </PopoverHeader>\n          ))}\n        </PopoverComponent>\n      )}\n\n      {/* -----------------------------------------------------DIVIDE----------------------------------------------- */}\n\n      <PopoverComponent label=\"Brands\">\n        <InputGroup>\n          <InputLeftElement\n            pointerEvents=\"none\"\n            children={<Icon as={FaSearch} color=\"gray\" />}\n          />\n          <Input\n            placeholder=\"Search\"\n            borderRadius=\"0\"\n            borderWidth=\"0\"\n            borderBottomWidth={1}\n          />\n        </InputGroup>\n        <PopoverBody>\n          <Text {...popFont}>Suggested</Text>\n        </PopoverBody>\n        {suggestedBrands?.map((e, i) => (\n          <PopoverHeader {...font} key={nanoid()}>\n            {e}\n          </PopoverHeader>\n        ))}\n        <PopoverBody>\n          <Text {...popFont}>A-Z</Text>\n        </PopoverBody>\n        {allBrands?.map((e, i) => (\n          <PopoverHeader {...font} key={nanoid()}>\n            {e}\n          </PopoverHeader>\n        ))}\n      </PopoverComponent>\n\n      {/* -----------------------------------------------------DIVIDE----------------------------------------------- */}\n      <PopoverComponent label=\"Size\">\n        {allSizes?.map((e, i) => (\n          <PopoverHeader {...font} key={nanoid()}>\n            {e}\n          </PopoverHeader>\n        ))}\n      </PopoverComponent>\n      {/* -----------------------------------------------------DIVIDE----------------------------------------------- */}\n\n      <PopoverComponent label=\"Price\">\n        <PopoverHeader {...font}>\n          Input Price Component |addition of MeProtocolButton|\n        </PopoverHeader>\n      </PopoverComponent>\n      {/* -----------------------------------------------------DIVIDE----------------------------------------------- */}\n\n      <Spacer />\n      <Box>\n        <PopoverComponent label=\"Sort\">\n          {sort?.map((e) => (\n            <PopoverHeader\n              as=\"button\"\n              onClick={() => {\n                // alert(e);\n                onClose();\n              }}\n              key={nanoid()}\n              {...font}\n            >\n              {e}\n            </PopoverHeader>\n          ))}\n        </PopoverComponent>\n      </Box>\n    </HStack>\n  );\n};\n\nexport default memo(MeProtocolFilters);\n\nconst useStyles = () => {\n  return {\n    root: {\n      h: \"36px\",\n      pr: \"20px\",\n      _hover: {\n        background: \"black\",\n        color: \"white\",\n      },\n    },\n\n    font: {\n      fontSize: \"16px\",\n      // lineHeight: '19px',\n      _hover: { bg: \"#F6F6F6\" },\n    },\n\n    popFont: {\n      fontSize: \"12px\",\n      color: \"#999999\",\n    },\n    popContentStyle: {\n      borderRadius: \"0\",\n      width: \"246px\",\n      background: \"#FFFFFF\",\n      border: \"1px\",\n    },\n  };\n};\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { usePopoverContext, usePopoverStyles } from \"./popover-context\"\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">(\n  function PopoverBody(props, ref) {\n    const { getBodyProps } = usePopoverContext()\n\n    const styles = usePopoverStyles()\n\n    return (\n      <chakra.div\n        {...getBodyProps(props, ref)}\n        className={cx(\"chakra-popover__body\", props.className)}\n        __css={styles.body}\n      />\n    )\n  },\n)\n\nPopoverBody.displayName = \"PopoverBody\"\n"],"names":["MeProtocolFilters","_ref","filterOptions","_useStyles","useStyles","font","root","popFont","_useDisclosure","popContentStyle","useDisclosure","onClose","onOpen","allCategories","isOpen","useRef","suggestedBrands","allBrands","allSizes","sort","_jsxs","HStack","w","children","includes","_jsx","PopoverComponent","label","map","e","i","_createElement","PopoverHeader","_objectSpread","key","nanoid","InputGroup","InputLeftElement","pointerEvents","Icon","as","FaSearch","color","Input","placeholder","borderRadius","borderWidth","borderBottomWidth","PopoverBody","Text","Spacer","Box","onClick","memo","h","pr","_hover","background","fontSize","bg","width","border","forwardRef","props","ref","getBodyProps","usePopoverContext","styles","usePopoverStyles","jsx","chakra","className","cx","__css","body","displayName"],"sourceRoot":""}