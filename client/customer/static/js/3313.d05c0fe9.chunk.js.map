{"version":3,"file":"static/js/3313.d05c0fe9.chunk.js","mappings":"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","sources":["pages/AuthenticationModule/Login/Login.tsx","../node_modules/@chakra-ui/layout/src/link.tsx"],"sourcesContent":["// @flow\nimport { Divider, Flex, Heading, Link, Spinner, Text, VStack } from \"@chakra-ui/react\";\nimport { lazy, Suspense, useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { Formik, FormikHelpers, FormikValues } from \"formik\";\nimport { AuthReducerProps, LoginFormikValues, UserReducerProps } from \"../../../interfaces\";\nimport { GLOBAL_PREFIX, LoginValidationSchema } from \"../../../constants\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport { loginFn, resetErrorMsg } from \"../../../redux/AuthSlice\";\nimport { RootState } from \"../../../redux/store\";\nimport { useOnline } from \"rooks\";\nimport { BASE_URL } from \"../../../config\";\nimport Container from \"../../../components/Container\";\nimport { getUserInfo } from \"../../../redux/UserSlice\";\nconst TopIconBar = lazy(() => import(\"../../../components/TopIconBar\"));\nconst MeProtocolButton = lazy(() => import(\"../../../components/MeProtocolButton\"));\nconst MeProtocolFormikButton = lazy(() => import(\"../../../components/MeProtocolFormikButton\"));\nconst MeProtocolInput = lazy(() => import(\"../../../components/MeProtocolInput\"));\n\nexport const Login = () => {\n  let location = useLocation();\n  let navigate = useNavigate();\n  const online = useOnline();\n  const dispatch = useDispatch<Dispatch>();\n  const [googleLoading, setGoogleLoading] = useState<boolean>(false);\n  const { isLoading, error, token }: AuthReducerProps = useSelector(\n    (state: RootState) => state.authReducer\n  );\n  const { user_data }: UserReducerProps = useSelector((state: RootState) => state.userReducer);\n  const [errorMsg, setErrorMsg] = useState<string>(\" \");\n\n  const { root, boxLeft, boxLogin, leftImg, loginColumn, head, desc } = useStyles();\n  // useEffect(() => {\n  //   if (!token) {\n  //     navigate(`${GLOBAL_PREFIX}/login`);\n  //   }\n  // });\n\n  useEffect(() => {\n    dispatch(resetErrorMsg());\n    // console.log(location, \"LOCAAA\");\n\n    if (token) {\n      dispatch(resetErrorMsg());\n      navigate(`${GLOBAL_PREFIX}/dashboard`);\n    }\n  }, [dispatch, token, navigate]);\n\n  const onSubmit = async (\n    { email, password }: FormikValues,\n    actions: FormikHelpers<LoginFormikValues>\n  ) => {\n    if (!online) return;\n    // const data: any = await dispatch(loginFn({email, password}));\n    // console.log(data, \"TESRRRSE\")\n    // return\n    const { payload, error }: any = await dispatch(loginFn({ identifier: email, password }));\n    if (error) {\n      return setErrorMsg(error?.message);\n    }\n\n    if (payload) {\n      const { payload: userPayload }: any = await dispatch(getUserInfo({ token: payload }));\n\n      if (userPayload?.customer?.walletAddress) {\n        navigate(`${GLOBAL_PREFIX}/dashboard`);\n      } else {\n        navigate(`${GLOBAL_PREFIX}/syncRewards`);\n      }\n    }\n    // if (payload) {\n    //   // IF PHONE IS NOT ADDED GO TO PHONE VERIFICATION PAGE\n    //   if (payload?.access_token?.phones?.length < 1) {\n    //     navigate(`${GLOBAL_PREFIX}/phone_auth`, {\n    //       state: payload?.access_token,\n    //     });\n    //     return;\n    //   }\n    //   // IF PHONE NUMBER IS ADDED BUT 2FA IS ENABLED GO TO PHONE CODE VERIFICATION PAGE\n    //   if (payload?.access_token?.phones?.length > 0) {\n    //     const { status }: { status: number } = await axios.get(\n    //       `${BASE_URL}/users/phone/${payload?.access_token?.phones[0].phone}/${payload?.access_token?.user?.userId}`\n    //     );\n    //     if (status === 200) {\n    //       navigate(`${GLOBAL_PREFIX}/code_input`, {\n    //         state: {\n    //           state: payload?.access_token,\n    //           value: payload?.access_token?.phones[0],\n    //         },\n    //       });\n    //     }\n    //     return;\n    //   }\n    //   //IF 2FA IS DISABLED LOGIN DIRECTLY\n    //   if (payload?.access_token?.token) {\n    //     // console.log(payload, \"JJOOPOJHUHUUHU\");\n    //     // navigate(`${GLOBAL_PREFIX}/dashboard`);\n\n    //     await dispatch(getUserInfo({ token: payload?.access_token?.token }));\n    //     dispatch(GET_WALLETS({ token: payload?.access_token?.token }));\n    //     dispatch(getUserCollection({ token: payload?.access_token?.token }));\n\n    //     if (user_data?.customer?.walletAddress) {\n    //       navigate(`${GLOBAL_PREFIX}/dashboard`);\n    //     } else {\n    //       navigate(`${GLOBAL_PREFIX}/syncRewards`);\n    //     }\n    //   }\n    // }\n  };\n\n  async function SignInWithGoogle() {\n    let config = {\n      method: \"post\",\n      url: `${BASE_URL}/user/google`,\n    };\n\n    try {\n      setGoogleLoading(true);\n      // const { data }: any = await axios(config);\n      // console.log(data,\"hhhhhhhh\")\n      // if (data) {\n      //   window.location.replace(data.url);\n      window.location.replace(`${BASE_URL}/user/google`);\n      // }\n    } catch (e: any | unknown) {\n      console.log(e, \"err google\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  async function SignInWithTwitter() {\n    try {\n      window.location.replace(`${BASE_URL}/users/twitter`);\n    } catch (e: any | unknown) {\n      console.log(e, \"err twitter\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  async function SignInWithFacebook() {\n    try {\n      window.location.replace(`${BASE_URL}/users/facebook`);\n    } catch (e: any | unknown) {\n      console.log(e, \"err twitter\");\n    } finally {\n      setGoogleLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Container>\n        <Suspense fallback={<Spinner size=\"sm\" />}>\n          <TopIconBar pos={\"fixed\"} />\n        </Suspense>\n        <Flex {...root}>\n          <Flex {...boxLogin}>\n            <Formik\n              initialValues={{ email: \"\", password: \"\" }}\n              validationSchema={LoginValidationSchema}\n              //@ts-ignore\n              onSubmit={onSubmit}\n            >\n              {(formik) => (\n                <VStack\n                  as={\"form\"}\n                  {...loginColumn}\n                  //@ts-ignore\n                  onSubmit={formik.handleSubmit}\n                  onChange={() => dispatch(resetErrorMsg())}\n                >\n                  <Heading {...head} pb={2}>\n                    Let’s Login\n                  </Heading>\n\n                  <Flex w={\"100%\"} justify={\"space-between\"}>\n                    <Suspense fallback={<Spinner size=\"sm\" />}>\n                      <MeProtocolButton\n                        isLoading={googleLoading}\n                        name={\"Sign in with Google\"}\n                        onClick={() => {\n                          window.location.replace(`${BASE_URL}/user/google`);\n                        }}\n                        // onClick={SignInWithGoogle}\n                        rest={{ w: \"100%\" }}\n                      />\n                    </Suspense>\n\n                    {/* <Flex w={\"25%\"} justify={\"space-between\"}>\n                      <Center\n                        as={Button}\n                        bg={\"#F6F6F6\"}\n                        h={\"40px\"}\n                        w={\"65px\"}\n                        borderRadius={\"25px\"}\n                        onClick={SignInWithFacebook}\n                        _hover={{ bg: \"black\", color: \"light\" }}\n                        role=\"group\"\n                      >\n                        <Icon\n                          color={\"#999999\"}\n                          w={\"20px\"}\n                          h={\"20px\"}\n                          as={FaFacebookSquare}\n                          _groupHover={{ color: \"light\" }}\n                        />\n                      </Center>\n\n                      <Center\n                        as={Button}\n                        bg={\"#F6F6F6\"}\n                        h={\"40px\"}\n                        w={\"65px\"}\n                        ml=\"5px\"\n                        borderRadius={\"25px\"}\n                        onClick={SignInWithTwitter}\n                        _hover={{ bg: \"black\", color: \"light\" }}\n                        role=\"group\"\n                      >\n                        <Icon\n                          color={\"#999999\"}\n                          w={\"20px\"}\n                          h={\"20px\"}\n                          as={FaTwitter}\n                          // _hover={{ color: \"light\" }}\n                          _groupHover={{ color: \"light\" }}\n                        />\n                      </Center>\n                    </Flex> */}\n                  </Flex>\n                  <Flex align={\"center\"} w={\"100%\"} justify={\"space-between\"}>\n                    <Divider w={\"45%\"} color={\"#ECECEC\"} />\n                    <Text color={\"#999999\"} fontSize={{ base: \"12px\", md: \"20px\" }}>\n                      or\n                    </Text>\n                    <Divider w={\"45%\"} color={\"#ECECEC\"} />\n                  </Flex>\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    <MeProtocolInput name={\"email\"} type={\"email\"} placeholder={\"your@email.com\"} />\n\n                    <MeProtocolInput name={\"password\"} type={\"password\"} placeholder={\"Password\"} />\n                  </Suspense>\n\n                  {errorMsg && (\n                    <Text {...desc} color={\"red\"}>\n                      {errorMsg}\n                    </Text>\n                  )}\n                  <Link\n                    onClick={() => navigate(`${GLOBAL_PREFIX}/password_reset`)}\n                    {...desc}\n                    py={3}\n                    textDecoration={\"underline\"}\n                    w={\"30%\"}\n                  >\n                    Forgot Password\n                  </Link>\n                  <Suspense fallback={<Spinner size=\"sm\" />}>\n                    <MeProtocolFormikButton isLoading={isLoading} name={\"Login\"} />\n                  </Suspense>\n\n                  <Text {...desc} pt={\"10px\"}>\n                    Don’t have an account yet?\n                    <Link\n                      onClick={() => {\n                        navigate(`${GLOBAL_PREFIX}/register`);\n                      }}\n                      textDecoration={\"underline\"}\n                    >\n                      {\" \"}\n                      Create one here.\n                    </Link>\n                  </Text>\n                </VStack>\n              )}\n            </Formik>\n          </Flex>\n        </Flex>\n      </Container>\n    </>\n  );\n};\n\nexport default Login;\n\nexport const useStyles = () => {\n  return {\n    root: {\n      h: \"100vh\",\n      align: \"center\",\n      justify: \"center\",\n      bg: \"light\",\n    },\n    boxLeft: {\n      display: [\"none\", \"none\", \"none\", \"flex\", \"flex\"],\n      bg: \"light\",\n      fontSize: 40,\n      h: \"100%\",\n      w: \"40vw\",\n    },\n    boxLogin: {\n      // bg: \"light\",\n      // bg: \"red\",\n      fontSize: 40,\n      // justify: \"center\",\n      h: \"100%\",\n      w: [\"100%\", \"100%\", \"80%\", \"50%\", \"50%\"],\n      overflow: \"hidden\",\n    },\n    boxRegister: {\n      fontSize: 40,\n      h: \"100vh\",\n      w: [\"100%\", \"100%\", \"80%\", \"80%\", \"70%\"],\n      justify: \"center\",\n    },\n    leftImg: {\n      h: \"100%\",\n      w: \"100%\",\n    },\n    loginColumn: {\n      bg: \"light\",\n      w: \"100%\",\n      align: \"flex-start\",\n      pt: {\n        base: \"5vh\",\n        md: \"10vh\",\n      },\n      px: {\n        base: \"15px\",\n      },\n      justifySelf: \"center\",\n    },\n    registerColumn: {\n      bg: \"light\",\n      w: [\"100%\", \"100%\", \"100%\", \"80%\", \"70%\"],\n      align: \"flex-start\",\n      pt: {\n        base: \"5vh\",\n        md: \"10vh\",\n      },\n      px: {\n        base: \"15px\",\n        // md: 20\n      },\n      justifySelf: \"center\",\n    },\n    head: {\n      fontSize: {\n        base: \"18px\",\n        md: \"25px\",\n      },\n      pt: \"20px\",\n    },\n    desc: {\n      pb: \"5px\",\n      fontSize: {\n        base: \"15px\",\n        md: \"17px\",\n      },\n      w: {\n        base: \"100%\",\n        md: \"85%\",\n      },\n    },\n    basedText: {\n      pt: \"30px\",\n      fontSize: {\n        base: \"18px\",\n        md: \"20px\",\n      },\n    },\n    checkBoxRoot: {\n      py: \"20px\",\n    },\n    countrySelect: {\n      w: {\n        base: \"100%\",\n        md: \"100%\",\n      },\n      bg: \"grey\",\n      color: \"dark\",\n      borderColor: \"light\",\n      borderWidth: \"1px\",\n      align: \"center\",\n    },\n  };\n};\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps<\"Link\"> {\n  /**\n   *  If `true`, the link will open in new tab\n   *\n   * @default false\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">(function Link(props, ref) {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nLink.displayName = \"Link\"\n"],"names":["TopIconBar","lazy","MeProtocolButton","MeProtocolFormikButton","MeProtocolInput","useLocation","navigate","useNavigate","online","useOnline","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","googleLoading","_useSelector","useSelector","state","authReducer","isLoading","token","error","_useState3","userReducer","user_data","_useState4","errorMsg","setErrorMsg","_useStyles","useStyles","root","boxLogin","boxLeft","loginColumn","leftImg","head","desc","useEffect","resetErrorMsg","concat","GLOBAL_PREFIX","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref","actions","email","password","_yield$dispatch","payload","_userPayload$customer","_yield$dispatch2","userPayload","wrap","_context","prev","next","abrupt","loginFn","identifier","sent","message","getUserInfo","customer","walletAddress","stop","_x","_x2","apply","arguments","_jsx","_Fragment","children","_jsxs","Container","Suspense","fallback","Spinner","size","pos","Flex","_objectSpread","Formik","initialValues","validationSchema","LoginValidationSchema","formik","VStack","as","handleSubmit","onChange","Heading","pb","w","justify","name","onClick","window","location","replace","BASE_URL","rest","align","Divider","color","Text","fontSize","base","md","type","placeholder","Link","py","textDecoration","pt","h","bg","display","overflow","boxRegister","px","justifySelf","registerColumn","basedText","checkBoxRoot","countrySelect","borderColor","borderWidth","forwardRef","props","ref","styles","useStyleConfig","_omitThemingProps","omitThemingProps","className","isExternal","_objectWithoutProperties","_excluded","jsx","chakra","target","rel","cx","__css","displayName"],"sourceRoot":""}